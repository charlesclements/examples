<?xml version="1.0" encoding="utf-8"?>
<!-- containers\spark\myComponents\MyAlertPopUp.mxml -->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" 
						   xmlns:mx="library://ns.adobe.com/flex/mx" 
						   width="100%" height="100%" initialize="init()">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.demonsters.debugger.MonsterDebugger;
			import com.gamua.flox.Flox;
			import com.gamua.flox.Player;
			import com.gamua.flox.utils.HttpStatus;
			
			import model.AppModel;
			
			import net.fastindemand.dispatcher.Dispatcher;
			import net.fastindemand.event.AppEvent;
			
			//import net.fastindemand.event.AppEvent;
			

			private function init():void
			{
				
				
				username.text = "tom";
				password.text = "pass";
				
				trace(Player.current);
				
				Player.logout();
				
				trace(Player.current);
				
				
				//Player.loginWithEmailAndPassword(email,pass,loginOnly,onComplete,onError);
				
				
				/*
				// Register a new player:
				Player.loginWithEmailAndPassword("me@there.com", "my-password", false,
					function onComplete(currentPlayer:Player):void
					{
						trace("This player is apparently already registered. She's now logged in.");
					},
					function onError(error:String, httpStatus:int, confirmationMailSent:Boolean):void
					{
						if (confirmationMailSent)
							trace("The user was sent a confirmation mail. She must confirm the " +
								"message before being able to log in.");
						else
							trace("This e-mail address is already taken.");
					});
				
				// Login an existing player:
				Player.loginWithEmailAndPassword("me@there.com", "my-password", true,
					function onComplete(currentPlayer:Player):void
					{
						trace("Player logged in: " + currentPlayer);
					},
					function onError(error:String, httpStatus:int):void
					{
						if (httpStatus == HttpStatus.FORBIDDEN)
							trace("Unknown e-mail or wrong password");
						else
							trace("Error during login:", httpStatus, error);
					});
				
				// Reset password:
				Player.resetEmailPassword("me@there.com",
					function onComplete():void
					{
						trace("An e-mail that initiates a password reset has been sent.");
					},
					function onError(error:String, httpStatus:int):void
					{
						trace("Could not reset password:", httpStatus, error);
					});
				*/
				
			}
			
			
			
			
			
			
			protected function onDoLogin():void
			{
				
				trace("AlertPopUp_Login - onDoLogin");
				
				
				// Run verify condition.
				if( username.text.length <= 0 || password.text.length <= 0 ){ trace("AlertPopUp_Login - Enter valid email and password"); return; }
				
				
				// Login an existing player:
				// Player.loginWithEmailAndPassword("me@there.com", "my-password", true,
				Player.loginWithEmailAndPassword( username.text, password.text, true,
					function onComplete(currentPlayer:Player):void
					{
						trace("Player logged in: " + currentPlayer);
						
						
						//currentPlayer.
						
						MonsterDebugger.trace(this, currentPlayer );
						
						
						/*
						trace(result.username);
						trace(result.id);
						trace(result.active);
						
						AppModel.ID = result.id;
						txtWarning.text = "";
						
						// Tell projects to populate.
						
						Dispatcher.dispatchEvent( new AppEvent( AppEvent.LOGIN_SUCCESS ) );
						close();
						
						*/
						
						
						//close();
					},
					function onError(error:String, httpStatus:int):void
					{
						if (httpStatus == HttpStatus.FORBIDDEN)
							trace("Unknown e-mail or wrong password");
						else
							trace("Error during login:", httpStatus, error);
					});
				
				
				
				//getLogin();
				
				//Dispatcher.dispatchEvent( new AppEvent( AppEvent.LOGIN_SUCCESS ) );
				//close();
				
			}
			
			
			protected function onSignUp():void
			{
				
				trace("AlertPopUp_Login - onSignUp : " + username.text + " - " + password.text);
				
				
				
				// Register a new player:
				
				
				//Player.
				
				// Player.loginWithEmailAndPassword("me@there.com", "my-password", true, onComplete, onError ); 
				Player.loginWithEmailAndPassword( username.text, password.text, false,
					function onComplete(currentPlayer:Player):void
					{
						trace("This player is apparently already registered. She's now logged in.");
						close();
					},
					function onError(error:String, httpStatus:int, confirmationMailSent:Boolean):void
					{
						
						trace("error : " + error);
						trace("httpStatus : " + httpStatus);
						
						
						if (confirmationMailSent)
							trace("The user was sent a confirmation mail. She must confirm the " +
								"message before being able to log in.");
						else
							trace("This e-mail address is already taken.");
					});
				
				
				
				//getLogin();
				
				//Dispatcher.dispatchEvent( new AppEvent( AppEvent.LOGIN_SUCCESS ) );
				//close();
				
			}
			
			
			
			
			protected function onGuest():void
			{
				
				trace("AlertPopUp_Login - onGuest");
				getLogin();
				
				//Dispatcher.dispatchEvent( new AppEvent( AppEvent.LOGIN_SUCCESS ) );
				close();
				
			}
			
			
			
			
			
			
			
			
			
			
			protected function onCreateNew():void
			{
				
				trace("AlertPopUp_Login - onCreateNew");
				//dispatchEvent( new AppEvent( AppEvent.OPEN_PROJECT, {}, true ) );
				//close();
				
			}
			
			
			private function getLogin():void
			{
				
				trace("AlertPopUp_Login - getLogin");
				
				// Run verify condition.
				if( username.text.length <= 0 || password.text.length <= 0 ){ trace("AlertPopUp_Login - Enter valid email and password"); return; }
				
				
				
				
				// We need to hook up the FLOX signin stuff here.
				
				
				
				
				
				
				
				
				
				// Craete Loader.
				var ldr:URLLoader = new URLLoader();
				ldr.dataFormat = URLLoaderDataFormat.BINARY;
				ldr.addEventListener(Event.COMPLETE, onLoginLoad);
				
				// Create URLRequest.
				var req:URLRequest = new URLRequest( AppModel.SERVER_PATH + "login.php");
				req.method = URLRequestMethod.POST;
				
				//Add the URL variables 
				var variables:URLVariables = new URLVariables(); 
				variables.user = username.text;
				variables.password = password.text;
				req.data = variables; 
				
				// Do load.
				ldr.load(req);
				
			}
			
			
			private function onLoginLoad(e:Event):void
			{
				
				trace("AlertPopUp_Login - onLoginLoad");
				//MonsterDebugger.trace( this, e );
				trace(e.target.data);
				
				//var loader:URLLoader = URLLoader( e.target );
				
				
				/*
				*/
				
				if ( e.target.data != "null" && String( e.target.data ).length > 0 )
				{
						
					var result:Object = com.adobe.serialization.json.JSON.decode( e.target.data );
					MonsterDebugger.trace( this, result );
					
					trace(result.username);
					trace(result.id);
					trace(result.active);
					
					AppModel.ID = result.id;
					txtWarning.text = "";
					
					// Tell projects to populate.
					
					Dispatcher.dispatchEvent( new AppEvent( AppEvent.LOGIN_SUCCESS ) );
					close();
					
					
				}
				else
				{
					
					txtWarning.text = "Please enter correct user and password.";
					
				}
				
			}
			
			
			
			
			
			
			
			
		]]>
	</fx:Script>
	
	
	
	
	<s:Panel title="Please signin." width="100%" height="100%" backgroundColor="0xdddddd">
		<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
			<s:HGroup  paddingBottom="20" paddingLeft="10" paddingRight="10" horizontalAlign="left">
				<s:Label id="txtWarning" text=""/>
			</s:HGroup>
			<s:HGroup>
				<s:VGroup>
					<s:Label text="Username"/>
					<s:TextInput id="username" width="100%"/>
				</s:VGroup>
			</s:HGroup>
			<s:HGroup>
				<s:VGroup>
					<s:Label text="Password"/>
					<s:TextInput id="password" width="100%" displayAsPassword="true" />
				</s:VGroup>
			</s:HGroup>
			<s:HGroup horizontalAlign="left" verticalAlign="middle" width="100%" paddingLeft="10" paddingRight="10">
				<s:CheckBox id="rememberMe"/>
				<s:Label text="Remember me"/>
			</s:HGroup>
			<s:VGroup verticalAlign="bottom">
				
				<s:Button id="btnLogin" label="Login" height="50" width="100%" click="onDoLogin();"/>
				<s:Button id="btnNewUser" label="Sign Up" height="50" width="100%" click="onSignUp();"/>
				<s:Button id="btnGuest" label="Use as Guest" height="50" width="100%" click="onGuest();"/>
				
				<!--
				<s:HGroup verticalAlign="middle" width="100%" paddingLeft="10" paddingRight="10">
					<s:Button id="btnNewUser" label="New User" height="50" width="100%" click="onLogin();"/>
					<s:Button id="btnLogin" label="Login" height="50" width="100%" click="onLogin();"/>
				</s:HGroup>
				-->
				
			</s:VGroup>
		</s:VGroup>
	</s:Panel>
	
</s:SkinnablePopUpContainer>