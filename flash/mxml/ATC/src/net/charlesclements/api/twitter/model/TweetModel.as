package net.charlesclements.api.twitter.model{	import com.bedrock.framework.plugin.view.MovieClipView;	import com.greensock.TweenMax;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.CSSLoader;	import com.greensock.loading.LoaderMax;	import com.greensock.loading.data.LoaderMaxVars;	import com.swfjunkie.tweetr.Tweetr;	import com.swfjunkie.tweetr.events.TweetEvent;	import com.swfjunkie.tweetr.oauth.OAuth;	import com.swfjunkie.tweetr.oauth.events.OAuthEvent;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.SharedObject;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.system.Capabilities;	import flash.text.StyleSheet;		import hype.framework.core.ObjectPool;		import net.charlesclements.api.twitter.event.TwitterEvent;	import net.charlesclements.hype.objects.TextCloud;		public class TweetModel extends MovieClip//View	{						// Variables		private var tweetr:Tweetr;		private var oauth:OAuth;		public var serviceHost:String;// = "http://www.charlesclements.net/twitter/proxy";		private var so:SharedObject;		public var remember:Boolean;		private var _tweets:Array;		private var _timer:TweenMax;		public var css:StyleSheet;		private var searchTerms:Array;				//private var pool:ObjectPool;		//private var _container:UIComponent;								public function TweetModel()		{			super();												trace(this + " : TwitterManager");					}						public function initialize( $data:Object ):TweetModel		{						trace(this + " : initialize");						serviceHost = $data.serviceHost;			remember = ( $data.remember ) ? $data.remember : false;						// CSS			//setupCSS();						// Do setup.			setupLayout( $data ).setupTwitter().setupSO();						// Check weather.			_timer = TweenMax.to( {}, 30, { repeat:0, onComplete:checkForUpdates } ); 			_timer.pause();						return this;					}										private function checkForUpdates():void		{						trace("checkForUpdates");						// Restart timer.			_timer.restart();																							}								// Do visual setup.		private function setupCSS():void		{						trace(this + " : setupCSS");									css = new StyleSheet;									var f:Function = onHandle;			// onProgress:onHandle,			var l:LoaderMax = new LoaderMax( {name:"myCSS", onComplete:onHandle, onError:onHandle} );//LoaderMaxVars("css",f,f,f)			var url:String = ( Capabilities.playerType == 'External' ) ? "css/styles.css" : "assets/css/styles.css";			l.append( new CSSLoader( url ) );			l.load();								}								private function onHandle($e:LoaderEvent):void		{						trace(this + " onHandle: " + $e.type )			trace(LoaderMax.getContent("myCSS"))						//var s:StyleSheet = new StyleSheet;			css = LoaderMax.getContent("myCSS") as StyleSheet;								}						// Do visual setup.		private function setupLayout($data:Object=null):TweetModel		{						trace(this + " : setupLayout");						searchTerms = $data.searchTerms;						return this;					}						// Do setup for Twitter.		private function setupTwitter():TweetModel		{						trace(this + " : setupTwitter");						tweetr = new Tweetr;			tweetr.addEventListener(TweetEvent.COMPLETE, handleTweetEvent );			tweetr.addEventListener(TweetEvent.FAILED, handleTweetEvent );			tweetr.serviceHost = serviceHost;			oauth = new OAuth;			oauth.addEventListener(OAuthEvent.COMPLETE, handleOAuthEvent );			oauth.addEventListener(OAuthEvent.ERROR, handleOAuthEvent );			oauth.serviceHost = serviceHost;						oauth.consumerKey = "9syskTUk9B5aouKoPsw";			oauth.consumerSecret = "LsN2chhjV6eJi0bdl3YUkJpmOqgQxQOXFwNwBXQlRw";						return this;					}						// Do setup for SharedObject.		private function setupSO():TweetModel		{						trace(this + " : setupSO");						// Get / Create local SharedObject.			so = SharedObject.getLocal( "FastPlayer", "/" );						// Check if data exists.			if ( so.data.username != null )			{								trace(so.data.username)								oauth.username = so.data.username;				oauth.oauthToken = so.data.oauthToken;				oauth.oauthTokenSecret = so.data.oauthTokenSecret;								tweetr.oAuth = oauth;				//tweetr.getHomeTimeLine();																																				// Need to move this to the correct place to keep updating.				tweetr.getUserTimeLine( "MiamiChildrens" );																																								// Dispatch success.				dispatchEvent( new TwitterEvent( TwitterEvent.LOGIN, this ) );							}			else 			{								trace(this + " : No Twitter user stored.");								// Dispatch failure.				dispatchEvent( new TwitterEvent( TwitterEvent.AUTO_LOGIN_FAIL, this ) );							}						return this;					}														public function getUserTimeLine($userID:String):void		{						tweetr.getUserTimeLine( $userID );					}						// 		private function handleTweetEvent(e:TweetEvent):void		{						trace(this + " : handleTweetEvent : " + e.type);						switch( e.type )			{								case TweetEvent.COMPLETE:					trace(TweetEvent.COMPLETE);										// Parse data to be used.										//trace(e.data)					parseData(e.data);										/*					if ( e.data ) parseData(e.data);					else dispatchEvent( new TwitterEvent( TwitterEvent.INVALID_USER ) );					*/										break;								case TweetEvent.FAILED:					//trace("FAILED: Tweet NOT sent...");					//trace(e.info);										dispatchEvent( new TwitterEvent( TwitterEvent.FAIL, this ) );										break;							}					}						// Parses XML into useable data.		private function parseData($data:Object):void		{						trace("parseData");						var d:XML = new XML( $data );			var tweet:XMLList = d.status;			_tweets = [];									//trace(tweet[0]);						if( tweet[0] == undefined )			{								// Announce INVALID_USER				dispatchEvent( new TwitterEvent( TwitterEvent.INVALID_USER, this ) );				//break;				trace("INVALID_USER" );							}			else			{													for(var i:int = 0; i < tweet.length(); i++)				{										var item:XMLList = new XMLList( tweet[ i ] );					_tweets.push( { screen_name:item[0].user.screen_name, text:item[0].text } );										//trace( _tweets[i].screen_name );				}								// Announce data parsing.				dispatchEvent( new TwitterEvent( TwitterEvent.DATA_PARSED, this ) );							}						trace("parseData complete");								}						// Returns data.		public function getTweets():Array		{						return _tweets;					}						// Saves this Twitter information to a SharedObject. Pass a value of false to clear it.		public function saveCookie($state:Boolean=true):Boolean		{						trace("saveCookie : "+$state);			so.clear();			so.data.username = $state ? oauth.username : null;			so.data.userId = $state ? oauth.userId : null;			so.data.oauthToken = $state ? oauth.oauthToken : null;			so.data.oauthTokenSecret = $state ? oauth.oauthTokenSecret : null;			so.flush();						remember = $state;						return $state					}						// Handles authorization info for Twitter.		private function handleOAuthEvent(e:OAuthEvent):void		{						/*			trace("");			trace(this+" : handleOAuthEvent")			trace(e.type)			trace(e.text)			trace(e)			trace(e.url)			trace(oauth.username)			*/			switch( e.type )			{								case OAuthEvent.COMPLETE:					if( e.url ) 					{												navigateToURL( new URLRequest( e.url ) );											}					else					{												tweetr.oAuth = oauth;						saveCookie( remember );						dispatchEvent( new TwitterEvent( TwitterEvent.CONNECTED, this ) );											}					break;								case OAuthEvent.ERROR:					trace("ERROR connecting to Twitter.")					break;							}					}						public function submit( $code:String ):void		{						oauth.requestAccessToken( $code );					}						public function authorize():void		{						oauth.getAuthorizationRequest();					}						public function clear():void		{			trace(this + " : clear")			so.clear();			tweetr.destroy();					}			}}