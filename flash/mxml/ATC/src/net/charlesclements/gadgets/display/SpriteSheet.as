package net.charlesclements.gadgets.display{			// Imports.	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.Dictionary;			// Class.	public class SpriteSheet extends Object	{						// Vars.		private static var _bitmapdata:Dictionary = new Dictionary;						// Constructor.		public function SpriteSheet()		{						super();					}						// Returns a Bitmap instance.		public static function addContent(xml:XML, image:Bitmap, transparent:Boolean=true, fillColor:uint=0x00ff00, dispose:Boolean=false):void		{						trace("SpriteSheet - addContent");			parseAtlasXml( xml, image, transparent, fillColor, dispose );					}								// Returns a Bitmap instance.		public static function getBitmap(name:String, position:Point=null, pixelSnapping:String="auto", smoothing:Boolean=true):Bitmap		{						//trace("SpriteSheet - getBitmap");			var position:Point = position;			var b:Bitmap = new Bitmap( getBitmapData( name ), pixelSnapping, smoothing );			b.x = ( position ) ? position.x : 0;			b.y = ( position ) ? position.y : 0;			return b;					}						// Returns a BitmapData instance.		public static function getBitmapData(name:String):BitmapData		{						//trace("SpriteSheet - getBitmapData : " + name);			if( !_bitmapdata[ name ] ) throw( name + " does not exisit in the SriteSheet." );			return ( _bitmapdata[ name ] as BitmapData ).clone();					}						// Parse all images in the beginning.		private static function parseAtlasXml(xml:XML, image:Bitmap, transparent:Boolean=true, fillColor:uint=0x00ff00, dispose:Boolean=false):void		{						var region:Rectangle = new Rectangle();			var frame:Rectangle  = new Rectangle();			var scale:Number = 1;			var name:String;			var x:Number;			var y:Number;			var width:Number;			var height:Number;						// Loop thru and save to Dictionary.			for each (var subTexture:XML in xml.SubTexture)			{				name = cleanMasterString(subTexture.@name);				x = parseFloat(subTexture.@x) / scale;				y  = parseFloat(subTexture.@y) / scale;				width = parseFloat(subTexture.@width)  / scale;				height = parseFloat(subTexture.@height) / scale;				region.setTo(x, y, width, height);				var b:BitmapData = new BitmapData( width, height, transparent, fillColor );				b.copyPixels( image.bitmapData, region, new Point );				_bitmapdata[ name ] = b;								}						if( dispose != true ) return;			image.bitmapData.dispose();			image = null;					}						/** Replaces a string's "master string" — the string it was built from —		 *  with a single character to save memory. Find more information about this AS3 oddity		 *  <a href="http://jacksondunstan.com/articles/2260">here</a>.		 *		 *  @param  str String to clean		 *  @return The input string, but with a master string only one character larger than it.		 *  @author Jackson Dunstan, JacksonDunstan.com		 */		public static function cleanMasterString(str:String):String		{			return ("_" + str).substr(1);		}					}		}