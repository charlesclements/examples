package net.charlesclements.gadgets.text{	import com.bedrock.framework.plugin.util.ButtonUtil;	import com.bedrock.extras.util.StringUtil;	import com.greensock.TweenMax;	import com.greensock.easing.Elastic;	import com.greensock.easing.Quad;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filters.BlurFilter;	import flash.filters.GlowFilter;	import flash.geom.Point;	import flash.text.*;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;		import hype.extended.behavior.FixedVibration;	import hype.extended.behavior.Swarm;	import hype.framework.rhythm.SimpleRhythm;		import settings.Settings;	import com.bedrock.framework.plugin.view.MovieClipView;			// Constructor	public class RandomizerTextfield extends MovieClipView	{							// Variables		public var info:MovieClip;		public var index:uint;		public var textfield:TextField;		private var _textformat:TextFormat;		private var _content:String = "";		private var _bg:Sprite;		private var _textRandomizer:TextRandomizer;		private var _randomizerSpeed:Number;		private var _aheadCount:Number;		public var initialized:Boolean = false;		private var _css:StyleSheet;		private var searchTerms:Array;				// Constructor.		public function RandomizerTextfield()		{					}						public function initialize($data:Object):RandomizerTextfield		{						//trace(this + " : initialize")						if( !initialized ) 			{								setupTextformat( $data ).setupTextfield( $data ).setupRandomizer( $data );				initialized = true;							}						visible = false;						return this;					}						// Formats the text for display.		private function setupTextformat($data:Object ):RandomizerTextfield		{						//trace("setupTextformat");						searchTerms = $data.searchTerms;						var font:Stratum1 = new Stratum1;			_textformat = new TextFormat( font.fontName, (!$data.size)?7:$data.size, (!$data.color)?0xffffff:$data.color );						return this;					}						// Formats the text for display.		private function setupTextfield($data:Object):RandomizerTextfield		{						//trace("setupTextfield");						// Create Textfield.			textfield = new TextField;			textfield.autoSize = TextFieldAutoSize.LEFT;			textfield.embedFonts = true;			textfield.width = ( !$data.width )?9:$data.width;			textfield.multiline = true;			textfield.wordWrap = true;						textfield.setTextFormat( _textformat, -1, textfield.text.length - 1 );						// Create hotspot			if( Settings.DEBUG )			{								ButtonUtil.addListeners( this, { down:onDown } );							}						var b:Bitmap = new Bitmap( new BitmapData( textfield.width, textfield.height, false, ( !$data.bgColor )?0x000000:$data.bgColor ) );			b.name = "bitmap";			b.alpha = 0.75;			_bg = new Sprite;			addChild( _bg );			_bg.addChild( b );						addChild( textfield );						return this;					}						// Set up the randomizer so you can clear it later.		private function setupRandomizer($data:Object):RandomizerTextfield		{			//trace("setupRandomizer");						_randomizerSpeed = ( !$data.speed )?50:$data.speed;			_aheadCount = ( !$data.aheadCount )?7:$data.aheadCount;						_textRandomizer = new TextRandomizer( _randomizerSpeed, [ ] );						return this;					}								private function randomizeText():RandomizerTextfield		{						//trace("randomizeText");						_textRandomizer.clear()			_textRandomizer.removeEventListener( Event.CHANGE, onChange );			// textformatArray:prescribeFormats( _content, searchTerms ), 			_textRandomizer = new TextRandomizer( _randomizerSpeed, [ { textfield:textfield, textformat:_textformat, valign:"center", step:10, value:_content, inc:1, aheadCount:_aheadCount } ] );			_textRandomizer.addEventListener( Event.CHANGE, onChange );			_textRandomizer.start();						//textfield.visible = true;						//prescribeFormats( _content, searchTerms );						return this;					}						private function onChange($e:Event):void		{			//trace("onChange")			var b = _bg.getChildByName( "bitmap" ) as Bitmap;			var t:TextField = textfield;			TweenMax.to( b, 1, { x:t.width/2*-1, y:t.height/2*-1, height:t.height, width:t.width, ease:Quad.easeOut } );					}						// Adds text to the textfield.		public function addText($content:String):RandomizerTextfield		{						//trace("addText")									_content = $content;			textfield.text = "";			textfield.setTextFormat( _textformat, -1, textfield.text.length - 1 );						randomizeText();						visible = true;						return this;					}						private function onDown($e:MouseEvent):void		{						//trace("onDown");						ButtonUtil.removeListeners( this, { down:onDown, up:onUp } );			ButtonUtil.addListeners( this, { up:onUp } );			startDrag();					}						private function onUp($e:MouseEvent):void		{						trace(this + "onUp: " + "x:"+x + " y:"+y);						ButtonUtil.removeListeners( this, { down:onDown, up:onUp } );			ButtonUtil.addListeners( this, { down:onDown } );			stopDrag();					}						// Clears everything.		public function clear():RandomizerTextfield		{						trace(this +" : clear");						try			{								if( textfield ) textfield.text = "";				if( _textRandomizer ) _textRandomizer.clear();				removeChildren();							}			catch(e:Error)			{				/*				trace(this)				trace(e)				*/							}												return this;					}			}	}