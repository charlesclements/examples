package net.charlesclements.gadgets.text{		import com.greensock.TweenMax;	import com.greensock.easing.Quad;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.utils.Timer;
			public class TextRandomizer extends Sprite	{		private var _objTimer:Timer;			private var _arrTextUpdates:Array = new Array();		private var _bolOn:Boolean=false;			private var _textformat:TextFormat;		private var _height:int = 0;						// Constructor.		public function TextRandomizer($speed:Number,$arrTextFields:Array)		{						this._objTimer = new Timer($speed);			this._objTimer.addEventListener(TimerEvent.TIMER, this.onTrigger);						this._arrTextUpdates = $arrTextFields;					}						// Clears the class.		public function clear():void		{						this._objTimer.stop();					this._objTimer.removeEventListener(TimerEvent.TIMER, this.onTrigger);			this._objTimer = null;			this._arrTextUpdates = [];					}				public function start():void{			this._bolOn=true;			this._objTimer.start();					}			public function stop():void{			this._bolOn=false;		}		public function reset():void{			this._bolOn=false;			this._objTimer.stop();			var numLen:int = this._arrTextUpdates.length;			for(var i:int=0; i<numLen; i++){								var txtText:TextField = this._arrTextUpdates[i].textfield;					txtText.htmlText="";				this._arrTextUpdates[i].step=0;			}					}								public function update():void{			var numLen:int = this._arrTextUpdates.length;			var numFinished:int=0;			for(var i:int=0; i<numLen; i++){				var txtText:TextField = this._arrTextUpdates[i].textfield;				var strValue:String = this._arrTextUpdates[i].value;				var numStep:int = this._arrTextUpdates[i].step;				var numInc:Number = this._arrTextUpdates[i].inc;				var numAheadCount:Number = this._arrTextUpdates[i].aheadCount;								if(numAheadCount+numStep>strValue.length){					var numDifference:Number = (numAheadCount+numStep)-strValue.length;					numAheadCount -=numDifference;				}								var strAppliedValue:String;								if(numStep<strValue.length){					strAppliedValue = this.randomString(strValue,numStep,numAheadCount);					this._arrTextUpdates[i].step+=numInc; 				}else{					numFinished++;					strAppliedValue = strValue;				}				txtText.htmlText = strAppliedValue;								change( i );							}			if(numFinished==numLen || !this._bolOn)	this._objTimer.stop();					}						private function  change($i:uint):void		{						var t:TextField = ( this._arrTextUpdates[$i].textfield as TextField )			//trace(t.text)								// Apply TextFormat to textfield.			applyTextFormat( $i ).align( $i );			dispatchEvent( new Event( Event.CHANGE ) );				}								// Formats text in field when called.		private function applyTextFormat($i:uint):TextRandomizer		{						var t:TextField = ( this._arrTextUpdates[$i].textfield as TextField );			//trace(t.getTextFormat())			var tf:TextFormat = ( this._arrTextUpdates[$i].textformat as TextFormat );			//t.setTextFormat( tf, -1, t.text.length - 1 );			t.setTextFormat( tf, -1, t.text.length );						return this;					}						/*		Still needs to use align params. Will bhe implemented.		*/		private function align($i:uint):TextRandomizer		{						var o:Object = this._arrTextUpdates[$i]			var h:uint = ( o.textfield as TextField ).height;			var w:uint = ( o.textfield as TextField ).width;						TweenMax.to( o.textfield, 1, { x:w/2*-1, y:h/2*-1, ease:Quad.easeOut } );						/*			if( _height != h )			{								_height = h;				TweenMax.to( o.textfield, 1, { x:w/2*-1, y:h/2*-1, ease:Power2.easeOut } );							}			*/						return this;					}						private function randomString($str:String,$cur:int,$aheadCount:int):String{			var numTot:int = $cur+$aheadCount;							var strValue:String = "";						for(var i:int=0; i<numTot; i++){								var numRandomLetter:int = Math.round(Math.random()*$str.length);				var strLetter:String =$str.charAt(i);				if(i>$cur && strLetter!=" "){					strLetter = $str.charAt(numRandomLetter);				}								strValue+=strLetter;			}			return strValue;		}			private function onTrigger($event:TimerEvent):void{			this.update();		}	}}