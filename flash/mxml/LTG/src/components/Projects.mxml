<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" width="100%" height="100%"
					  backgroundColor="#ffffff" creationComplete="init()">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.XMLListCollection;
			import mx.events.CollectionEvent;
			import mx.managers.PopUpManager;
			
			import net.fastindemand.data.AppData;
			import net.fastindemand.dispatcher.Dispatcher;
			import net.fastindemand.event.AppEvent;
			
			// Alert window.
			private var alertRemove:AlertPopUp_RemoveProject = new AlertPopUp_RemoveProject;
			
			
			public function init():void
			{
				
				trace("Projects - init");
				AppData.currentProjectsFile = File.documentsDirectory;
				AppData.currentProjectsFile = AppData.currentProjectsFile.resolvePath("LyricsToGo/projects.xml");
				
				// If it does not exist.
				if( !AppData.currentProjectsFile.exists ) 
				{
					
					trace("File needs to be created.");
					var outputString:String = '<?xml version="1.0" encoding="utf-8"?>\n';
					outputString += '<projects><projects/>';
					outputString = outputString.replace( /\n/g, File.lineEnding );
					trace(outputString);
					// Write to file.
					AppData.stream = new FileStream();
					AppData.stream.open( AppData.currentProjectsFile, FileMode.UPDATE );
					
					// Write to external file.
						
				}
				else trace("File exists");
				
				// Read XML info.
				AppData.stream.open( AppData.currentProjectsFile, FileMode.READ);
				AppData.projectsXML = XML( AppData.stream.readUTFBytes( AppData.stream.bytesAvailable ) );
				AppData.stream.close();
				var xmllist:XMLList = AppData.projectsXML..title;//new XMLList( projectsXML );
				//trace(xmllist);
				
				AppData.projects = new XMLListCollection( xmllist );
				
				dataList.addEventListener( CollectionEvent.COLLECTION_CHANGE, onCollectionEvent );
				
				//
				Dispatcher.addEventListener( AppEvent.UPDATE_PROJECTS, onUpdateProjects );
				alertRemove.addEventListener( AppEvent.REMOVE_PROJECT, onRemoveProject );
				
			}
			
			protected function onUpdateProjects(e:Event):void
			{
				
				trace("Projects - onUpdateProjects");
				
				var xmllist:XMLList = AppData.projectsXML..title;
				AppData.projects = new XMLListCollection( xmllist );
				
				
				
			}
			
			protected function onCollectionEvent(e:mx.events.CollectionEvent):void
			{
				
				trace("onCollectionEvent");
				trace(dataList.selectedIndex);
				
				
			}
			
			
			protected function selectionChangedHandler(e:Event):void
			{
				
				trace("selectionChangedHandler");
				AppData.projectIndex = dataList.selectedIndex
				trace(AppData.projectIndex);
				
			}
			
			
			protected function createNewProject():void
			{
				trace("Projects : createNewProject");
				Dispatcher.dispatchEvent( new AppEvent( AppEvent.NEW_PROJECT, true ) );
				
			}

			
			protected function onRemoveProject(e:Event=null):void
			{
				
				trace("Projects : onRemoveProject");
				
				// Remove XML child node.
				delete AppData.projectsXML.children()[ AppData.projectIndex ];
				
				// This is the Strign that will get saved to the File.
				var outputString:String = '<?xml version="1.0" encoding="utf-8"?>\n';
				outputString += AppData.projectsXML.toXMLString();
				outputString = outputString.replace( /\n/g, File.lineEnding );
				
				// Saving the actual file.
				AppData.stream = new FileStream();
				AppData.stream.open( AppData.currentProjectsFile, FileMode.WRITE );
				AppData.stream.writeUTFBytes( outputString );
				AppData.stream.close();
				
				// Alert everyone else that the XML has been saved and changed.
				Dispatcher.dispatchEvent( new AppEvent( AppEvent.UPDATE_PROJECTS ) );
				
			}
			
			
			protected function initRemoveProject():void
			{
				
				trace("Projects : initRemoveProject");
				
				alertRemove.open( this, true );
				alertRemove.height = this.height
				alertRemove.width = this.width;
				
				// Center the pop-up in the parent container.
				PopUpManager.centerPopUp( alertRemove );
				
			}
			
			protected function openProject():void
			{
				
				trace("Projects : openProject");
				Dispatcher.dispatchEvent( new AppEvent( AppEvent.OPEN_PROJECT, true ) );
				
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup horizontalAlign="right">
		<s:Button id="openProjectButton" label="Open" click="openProject();"/>
		<s:Button id="newProjectButton" label="New" click="createNewProject();"/>
	</s:HGroup>
	
	<s:List dataProvider="{AppData.projects}" requireSelection="true" id="dataList" labelField="title" width="100%" height="100%" change="selectionChangedHandler(event)" >
		<s:layout>
			<s:VerticalLayout  />
		</s:layout>
	</s:List>
	
	<s:HGroup horizontalAlign="right">
		<s:Button id="removeProjectButton" label="Remove" click="initRemoveProject();"/>
	</s:HGroup>
	
</s:SkinnableContainer>
