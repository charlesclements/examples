<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" width="100%" height="100%"
					  backgroundColor="#ffffff" creationComplete="init()">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.XMLListCollection;
			import mx.events.CollectionEvent;
			import net.fastindemand.data.AppData;
			
			/*
			protected var projectsXML:XML;
			protected var currentProjectsFile:File;
			protected var stream:FileStream
			
			
			[Bindable]
			private var projects:XMLListCollection;*/
			
			
			
			public function init():void
			{
				
				trace("Projects - init");
				AppData.currentProjectsFile = File.documentsDirectory;
				AppData.currentProjectsFile = AppData.currentProjectsFile.resolvePath("LyricsToGo/projects.xml");
				
				// If it does not exist.
				if( !AppData.currentProjectsFile.exists ) 
				{
					
					trace("File needs to be created.");
					var outputString:String = '<?xml version="1.0" encoding="utf-8"?>\n';
					outputString += '<project/>';
					trace(outputString);
					// Write to file.
					AppData.stream = new FileStream();
					AppData.stream.open( AppData.currentProjectsFile, FileMode.UPDATE );
					
					// Write to external file.
						
				}
				else trace("File exists");
				
				// Read XML info.
				AppData.stream.open( AppData.currentProjectsFile, FileMode.READ);
				AppData.projectsXML = XML( AppData.stream.readUTFBytes( AppData.stream.bytesAvailable ) );
				AppData.stream.close();
				var xmllist:XMLList = AppData.projectsXML..title;//new XMLList( projectsXML );
				//trace(xmllist);
				
				AppData.projects = new XMLListCollection( xmllist );
				
				dataList.addEventListener( CollectionEvent.COLLECTION_CHANGE, onCollectionEvent );
				
			}
			
			protected function onCollectionEvent(e:mx.events.CollectionEvent):void
			{
				
				trace("onCollectionEvent");
				trace(dataList.selectedIndex);
				
				
			}
			
			
			protected function selectionChangedHandler(e:Event):void
			{
				
				trace("selectionChangedHandler");
				AppData.projectIndex = dataList.selectedIndex
				trace(AppData.projectIndex);
				
			}
			
			
			protected function saveText():void
			{
				
				trace("saveText");
				
				/*
				docTitle.text = ( docTitle.text != "" ) ? docTitle.text : "NewSong";
				var newProject:XML = new XML();  
				newProject = 
					<project> 
						<docTitle>{ docTitle.text }</docTitle> 
						<docContent>{ docContent.text }</docContent> 
					</project>; 
				currentProjectsXML = currentProjectsXML.appendChild( newProject ) 
				trace("currentProjectsXML:");
				trace(currentProjectsXML);
				//trace(currentXML[0]);
				*/
				
				
				var outputString:String = '<?xml version="1.0" encoding="utf-8"?>\n';
				outputString += AppData.projectsXML.toXMLString();
				outputString = outputString.replace( /\n/g, File.lineEnding );
				
				AppData.stream = new FileStream();
				AppData.stream.open( AppData.currentProjectsFile, FileMode.WRITE );
				
				AppData.stream.writeUTFBytes( outputString );
				AppData.stream.close();
				trace("outputString:");
				trace( outputString );
				
				/*
				var stream:FileStream = new FileStream();
				stream.open(currentProjectsFile, FileMode.WRITE);
				currentProjectsXML = XML(stream.readUTFBytes(stream.bytesAvailable));
				stream.close();
				trace(currentProjectsXML);
				*/
				
				
			}
			
			protected function createNewProject():void
			{
				trace(this + " : createNewProject");
				dispatchEvent( new Event( "createNewProject", true ) );
				
			}
			
			protected function openProject():void
			{
				
				trace(this + " : openProject");
				dispatchEvent( new Event( "openProject", true ) );
				
			}
			
			/*
			private function handleResults(evt:ResultEvent):void {
				projects = new XMLListCollection(evt.result.product);
			}
			*/
			
			
			
		]]>
	</fx:Script>
	
	<s:HGroup horizontalAlign="right">
		<s:Button id="openProjectButton" label="Open" click="openProject();"/>
		<s:Button id="newProjectButton" label="New" click="createNewProject();"/>
	</s:HGroup>
	
	
	<s:List dataProvider="{AppData.projects}" requireSelection="true" id="dataList" labelField="title" width="100%" height="100%" change="selectionChangedHandler(event)" >
		<s:layout>
			<s:VerticalLayout  />
		</s:layout>
	</s:List>
	
	
</s:SkinnableContainer>
