<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" width="100%" height="100%"
					  backgroundColor="#ffffff" xmlns:components="components.*" xmlns:media="components.media.*" xmlns:ns="http://www.flextras.com/mxml" >
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.greensock.loading.LoaderMax;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.managers.PopUpManager;
			
			import components.alerts.AlertPopUp_CloseProject;
			import components.media.AudioPlayer;
			
			import model.AppModel;
			
			import net.fastindemand.dispatcher.Dispatcher;
			import net.fastindemand.event.AppEvent;
			
			
			[Bindable]
			public var dataProvider : ArrayCollection = 
				new ArrayCollection([ 
					{label:'Alabama',data:1}, 
					{label:'Alaska',data:2}, 
					{label:'Arizona',data:3}, 
					{label:'Arkansas',data:4}, 
					{label:'California',data:5}
			]);

		
			// Vars.
			// Alert window.
			private var alertClose:AlertPopUp_CloseProject = new AlertPopUp_CloseProject;
			private var _sound:Sound;
			private var _audioFile:File;
			private var _loader:LoaderMax;
			private static var _saved:Boolean = true;
			[Bindable]
			private var xmllist:XMLList;
			
			// Initializes class.
			public function init():void
			{
				
				trace("ProjectCreator - init");
				Dispatcher.addEventListener( AppEvent.NEW_PROJECT, onEvent );
				Dispatcher.addEventListener( AppEvent.OPEN_PROJECT, onEvent );
				alertClose.addEventListener( AppEvent.CLOSE_PROJECT, onEvent );
				
				// Audio player.
				audioPlayer.update();
				page.removeElement( audioPlayer );
				showMediaButton.enabled = true;
				//versesList
				
				
				//page.addElement( hgroupVerses );
				
			}
			

			// Event handling function.
			protected function onEvent(e:Event):void
			{
				
				trace("ProjectCreator - onEvent");
				//trace( buttons.activeEffects );
				
				
				//trace( buttons.selectedIndex );
				// Need to set this to -1 so that none of the buttons are selected.
				// If left selected, by reselecting them, you'll potentially get an error. 
				buttons.selectedIndex = -1;// May not work, apply changes to button state skins.
				//trace( buttons.selectedIndex );
				
				
				
				switch( e.type )
				{
					
					case AppEvent.NEW_PROJECT:
						
						
						trace("ProjectCreator - onEvent - NEW_PROJECT");
						var d:Date = new Date;
						AppModel.PID = String( d.time );
						docTitle.text = String( "Untitled " + AppModel.PROJECTS_XML.children().length() );
						docContent.text = "";
						
						// Createfolder.
						var folder:File = AppModel.STORAGE.resolvePath("LyricsToGo/" + AppModel.PID );
						
						folder.createDirectory();
						
						// Single project.
						var singleProjectXmlList:XMLList = new XMLList(
							<project>
								<title>{ docTitle.text }</title>
								<id>{ AppModel.PID }</id>
								<content></content>
								<audio name="" url="" start="0" end="-1" />
							</project>)
						
						// All projects
						var addProjectXmlListNode:XMLList = new XMLList(
							<project>
								<title>{ docTitle.text }</title>
								<id>{ AppModel.PID }</id>
							</project>)
						
						
						// Add to PROJECTS_XML
						AppModel.PROJECTS_XML.prependChild( addProjectXmlListNode );
						AppModel.PROJECT_INDEX = 0;
						
						// Save single project.
						AppModel.saveSingleProjectXML( AppModel.PID, singleProjectXmlList );
						
						// Save main projects file.
						AppModel.saveAllProjectsXML( AppModel.PROJECTS_XML );
						
						// Temporarily kill Save button.
						//saveButton.enabled = false;
						_saved = false;
						break;
					
					case AppEvent.OPEN_PROJECT:
						
						trace("ProjectCreator - onEvent - OPEN_PROJECT");
						var xml:XML = XML( AppModel.PROJECTS_XML.children()[ AppModel.PROJECT_INDEX ] );
						
						//AppModel.PID = xml.PID;
						AppModel.PID = xml.id;
						
						// Temporarily kill Save button.
						//saveButton.enabled = false;
						_saved = false;
						
						// Load project directory.
						var path:String = AppModel.STORAGE.nativePath + "/LyricsToGo/user/" + AppModel.ID + "/projects/" + AppModel.PID + "/project.xml";
						var f:File = AppModel.CURRENT_PROJECT_FILE = File.applicationStorageDirectory.resolvePath( path ); 
						
						trace("++++");
						trace(path);
						
						
						
						var s:FileStream = AppModel.STREAM = new FileStream;
						s.open( f, FileMode.READ ); 
						AppModel.CURRENT_XML = XML( s.readUTFBytes( s.bytesAvailable ) ); 
						s.close(); 
						
						// Set text field content.
						docContent.text = AppModel.CURRENT_XML[0].content;
						docTitle.text = AppModel.CURRENT_XML[0].title;
						
						//var xmllist:XMLList = new XMLList( AppModel.CURRENT_XML );
						//trace(xmllist);
						////versesList.//.dataProvider( xmllist );
						//versesList.
						
						break;
					
					case AppEvent.CLOSE_PROJECT:
						trace("ProjectCreator - onEvent - CLOSE_PROJECT");
						clear();
						trace("-");
						Dispatcher.dispatchEvent( new AppEvent( AppEvent.CLOSE_PROJECT, true ) );
						break;
					
				}

			}
			
			
			protected function saveText():void
			{
				
				trace("ProjectCreator - saveText");
				
				var singleProjectXMLList:XMLList = new XMLList( AppModel.CURRENT_XML );
				singleProjectXMLList.title = docTitle.text;
				singleProjectXMLList.content = docContent.text;
				AppModel.PROJECTS_XML..project[ AppModel.PROJECT_INDEX ].title = docTitle.text;
				
				// Save XML project file locally at this point.
				AppModel.saveSingleProjectXML( AppModel.PID, singleProjectXMLList );
				
				// Save main projects file.
				AppModel.saveAllProjectsXML( AppModel.PROJECTS_XML );
				
				// Alert everyone else that the XML has been saved and changed.
				Dispatcher.dispatchEvent( new AppEvent( AppEvent.UPDATE_PROJECTS ) );
				
				// Temporarily kill Save button.
				_saved = false;
					
			}
			
			
			// Called when a textfield's content changes.
			protected function onProjectChange(e:Event=null):void
			{
				
				//trace("ProjectMaster - onProjectChange");
				//saveButton.enabled = true;
				_saved = true;
				
			}
			
			
			protected function initCloseProject():void
			{
				
				trace("ProjectMaster - initCloseProject");
				
				if( _saved )
				{
					
					alertClose.open( this, true );
					alertClose.height = this.height
					alertClose.width = this.width;
					
					// Center the pop-up in the parent container.
					PopUpManager.centerPopUp(alertClose);
					
				}
				else
				{
					
					// project is already saved.
					closeProject();
					
				}
				
				
			}
			
			
			protected function closeProject(e:Event=null):void
			{
				
				//trace("ProjectMaster - closeProject");
				Dispatcher.dispatchEvent( new AppEvent( AppEvent.CLOSE_PROJECT, true ) );
				
			}

			
			
			protected function _onAudioFileSelected(e:Event=null):void
			{
				
				
				trace( "ProjectCreator - _onAudioFileSelected()" );
				//trace( e.currentTarget );
				
				var f:File = e.currentTarget as File;
				
				
				AppModel.copyMusic( AppModel.PID, f );
				
				
				/*
				return;
				
				
				
				f.load();
				
				f.addEventListener(Event.COMPLETE, _onFileLoaded );
				
				_loader = new LoaderMax( { onComplete:_onSoundLoaded } );
				_loader.append( new MP3Loader( new URLRequest( ( e.currentTarget as File ).nativePath ) ) );
				_loader.load();
				
				
				
				// OK, we can grab the native path to the file here.
				
				// Do we need to load it? Does it contain the file already?
				
				// Save it to the model.
				
				*/
				
				
			}
			
			/*
			protected function _onFileLoaded(e:Event):void
			{
				
				trace("ProjectMaster - _onFileLoaded");
				
				trace( ( e.currentTarget as File ).nativePath );
				trace( ( e.currentTarget as File ).data.length );
				
				
				// Save reference in the XML doc.
				
				// Save loaded file in project directory in audio folder.
				
				// Reload as sound to play.
				
				// Always check to see if it exists.
				
				// Make sure there is a way to delete file if no longer needed or new sound is loaded.
				
				
			}
			
			protected function _onSoundLoaded(e:Event):void
			{
				
				trace("ProjectMaster - _onSoundLoaded");
				
			}
			*/
			
			
			protected function _loadMusic(e:Event=null):void
			{
				
				trace("ProjectMaster - _loadMusic");
				
				_audioFile = new File;
				_audioFile.addEventListener( Event.SELECT, _onAudioFileSelected );
				_audioFile.browse(  );//[ ".mp3" ]
				
			}

			
			protected function toggleViewAudio(e:Event=null):void
			{
				
				trace("ProjectMaster - toggleViewAudio");
				
				if( page.contains( audioPlayer ) ) page.removeElement( audioPlayer );
				else 
				{
					
					page.addElementAt( audioPlayer, 0 );
					audioPlayer.update();
					
				}
				
			}
			
			
			public function clear():void
			{
				
				trace("ProjectMaster - clear");
				docTitle.text = "";
				docContent.text = "";
				audioPlayer.clear();
				if( page.contains( audioPlayer ) ) page.removeElement( audioPlayer );
				
			}
			
			
			protected function buttons_clickHandler(event:MouseEvent):void
			{
				
				trace("ProjectMaster - buttons_clickHandler");
				switch( ( buttons.selectedItem as String ).toUpperCase() )
				{
					
					
					
					case "SAVE":
						trace( "SAVE" );
						saveText();
						break;
					
					case "CLOSE":
						trace( "CLOSE" );
						initCloseProject()
						break;
					
					default: 
						trace( "Nothing selected" );
					
				}
				
				// Need to set this to -1 so that none of the buttons are selected.
				// If left selected, by reselecting them, you'll potentially get an error. 
				buttons.selectedIndex = -1;
				
			}
			
			
		]]>
	</fx:Script>
	
		<!--
	<s:HGroup id="hControls" verticalAlign="middle" horizontalAlign="center" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" width="100%" color="#777">
		<s:ToggleButton width="100%" height="30"
						id="showMediaButton" label="SHOW MEDIA"
						click="toggleViewAudio()"
						/>
		<s:ToggleButton width="100%" height="30"
						id="loadAudioButton" label="LOAD MUSIC"
						click="_loadMusic()"
						/>
	</s:HGroup>
		-->
	
	
	<s:VGroup id="page" width="100%" height="100%">
		
			
		<media:AudioPlayer id="audioPlayer" width="100%" />
		
		
		
		
		<!-- Add mobile friendly DropDown here -->
		<!-- Implement ADD button next to it to add items to the list -->
		<s:HGroup id="hgroupVerses" verticalAlign="middle" horizontalAlign="right" paddingBottom="0" paddingLeft="5" paddingRight="5" paddingTop="0" width="100%">
			
			<s:ToggleButton width="100" height="30"
							id="showMediaButton" label="MEDIA"
							click="toggleViewAudio()"
							/>
			<ns:DropDownList id="versesList" contentBackgroundAlpha="1" width="100%" dataProvider="{dataProvider}" />
			<!--<ns:DropDownList id="versesList" contentBackgroundAlpha="1" width="100%"  />-->
			<s:Button id="newVerse" label="New"></s:Button>
			
		</s:HGroup>
		
		<s:HGroup id="hgroup" verticalAlign="middle" horizontalAlign="right" paddingBottom="0" paddingLeft="5" paddingRight="5" paddingTop="0" width="100%">
			
			<s:TextInput id="docTitle" width="100%" height="36" needsSoftKeyboard="true" change="onProjectChange()" />
			
		</s:HGroup>
		
		<s:TextArea id="docContent" width="100%" height="100%" skinClass="spark.skins.mobile.TextAreaSkin" needsSoftKeyboard="true" change="onProjectChange()" />
	
		<s:ButtonBar id="buttons" click="buttons_clickHandler(event)" width="100%">  
			<s:ArrayCollection>
				<fx:String>Save</fx:String> 
				<fx:String>Close</fx:String> 
			</s:ArrayCollection>
		</s:ButtonBar>
	
	</s:VGroup>
	
	
</s:SkinnableContainer>
