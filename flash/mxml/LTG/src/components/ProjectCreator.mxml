<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" width="100%" height="100%"
					  backgroundColor="#ffffff" xmlns:components="components.*" xmlns:media="components.media.*" >
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			
			// Imports.
			import com.demonsters.debugger.MonsterDebugger;
			import com.greensock.loading.LoaderMax;
			import com.greensock.loading.MP3Loader;
			
			import mx.managers.PopUpManager;
			
			import components.alerts.AlertPopUp_CloseProject;
			import components.media.AudioPlayer;
			
			import model.AppModel;
			
			import net.fastindemand.dispatcher.Dispatcher;
			import net.fastindemand.event.AppEvent;
			
			// Vars.
			// Alert window.
			private var alertClose:AlertPopUp_CloseProject = new AlertPopUp_CloseProject;
			private var _sound:Sound;
			private var _audioFile:File;
			private var _loader:LoaderMax;
			//private var audioPlayer:AudioPlayer = new AudioPlayer;
			
			
			// Initializes class.
			public function init():void
			{
				
				trace("ProjectCreator - init");
				Dispatcher.addEventListener( AppEvent.NEW_PROJECT, onEvent );
				Dispatcher.addEventListener( AppEvent.OPEN_PROJECT, onEvent );
				alertClose.addEventListener( AppEvent.CLOSE_PROJECT, onEvent );
				
				// Audio player.
				audioPlayer.update();
				removeElement( audioPlayer );
				showMediaButton.enabled = true;
				
			}
			

			// Event handling function.
			protected function onEvent(e:Event):void
			{
				
				switch( e.type )
				{
					
					case AppEvent.NEW_PROJECT:
						
						
						trace("ProjectMaster - onEvent - NEW_PROJECT");
						var d:Date = new Date;
						AppModel.PID = String( d.time );
						docTitle.text = String( "Untitled " + AppModel.PROJECTS_XML.children().length() );
						docContent.text = "";
						
						
						// In this location is where it needs to place the latest/newest created file placed in the beginning of the XML children.
						
						
						trace( AppModel.PROJECTS_XML );
						trace( "" );
						trace( "" );
						trace( "" );
						
						
						
						
						// Createfolder.
						var folder:File = File.documentsDirectory.resolvePath("LyricsToGo/" + AppModel.PID );
						folder.createDirectory();
						//AppModel.PROJECTS_XML.prependChild( new XMLList(<project id="" title=""></project>) );
						AppModel.PROJECTS_XML.prependChild( new XMLList(
							<project>
								<title>{ docTitle.text }</title>
								<id>{ AppModel.PID }</id>
								<audio name="" url="" start="0" end="-1" />
							</project>) );
						
						
						
						
						
						
						// May want to consider using just attributes of the XML node....
						
						// Clean up XML file.
						
						
						
						
						
						
						
						
						trace( AppModel.PROJECTS_XML );
						trace( "" );
						trace( "" );
						trace( "" );
						trace( AppModel.PROJECTS_XML[ 0 ] );
						
						
						
						
						
						
						
						
						/*
						AppModel.PROJECTS_XML..project[ 0 ].@id = AppModel.PID;
						AppModel.PROJECTS_XML..project[ 0 ].@title = docTitle.text;
						
						
						
						
						
						
						
						//trace( AppModel.PROJECTS_XML );
						var xmllist:XMLList = new XMLList(<project id=""></project>);
						
						xmllist.@id = AppModel.PID;
						
						xmllist.title = docTitle.text;
						xmllist.content = docContent.text;
						xmllist.audio.@name = "";
						xmllist.audio.@start = "0";
						xmllist.audio.@end = "-1";
						//xmllist.PID = AppModel.PID;
						
						
						*/
						// Save XML in folder;
						
						var xmllist:XMLList = AppModel.PROJECTS_XML..project[ 0 ];
						trace(xmllist);
						
						
						
						return;// the below is untouched and needs to be modifyed
						
						
						
						AppModel.saveXML( AppModel.PID, xmllist );
						
						// Temporarily kill Save button.
						saveButton.enabled = false;
						
						break;
					
					case AppEvent.OPEN_PROJECT:
						
						trace("ProjectMaster - onEvent - OPEN_PROJECT");
						var xml:XML = XML( AppModel.PROJECTS_XML.children()[ AppModel.PROJECT_INDEX ] );
						
						//AppModel.PID = xml.PID;
						AppModel.PID = xml.PID;
						
						// Temporarily kill Save button.
						saveButton.enabled = false;
						
						// Load project directory.
						var path:String = AppModel.STORAGE.nativePath + "/LyricsToGo/user/" + AppModel.ID + "/projects/" + AppModel.PID + "/project.xml";
						var f:File = AppModel.CURRENT_PROJECT_FILE = File.documentsDirectory.resolvePath( path ); 
						var s:FileStream = AppModel.STREAM = new FileStream;
						s.open( f, FileMode.READ ); 
						AppModel.CURRENT_XML = XML( s.readUTFBytes( s.bytesAvailable ) ); 
						s.close(); 
						
						// Set text field content.
						docContent.text = AppModel.CURRENT_XML[0].content;
						docTitle.text = AppModel.CURRENT_XML[0].title;
						
						break;
					
					case AppEvent.CLOSE_PROJECT:
						trace("ProjectMaster - onEvent - CLOSE_PROJECT");
						Dispatcher.dispatchEvent( new AppEvent( AppEvent.CLOSE_PROJECT, true ) );
						break;
					
				}

			}
			
			
			protected function saveText():void
			{
				
				trace("ProjectCreator - saveText");
				
				var xmllist:XMLList = AppModel.CURRENT_XML.project;
				xmllist.title = docTitle.text;
				xmllist.content = docContent.text;
				MonsterDebugger.trace( this, xmllist );
				
				// Save XML project file locally at this point.
				
				// Save in Model.
				AppModel.saveXML( AppModel.PID, xmllist );
				
				
				//return;
				
				// Alert everyone else that the XML has been saved and changed.
				Dispatcher.dispatchEvent( new AppEvent( AppEvent.UPDATE_PROJECTS ) );
				
				// Temporarily kill Save button.
				saveButton.enabled = false;
				
			}
			
			
			// Called when a textfield's content changes.
			protected function onProjectChange(e:Event=null):void
			{
				
				//trace("ProjectMaster - onProjectChange");
				saveButton.enabled = true;
				
			}
			
			
			protected function initCloseProject():void
			{
				
				//trace("ProjectMaster - initCloseProject");
				
				if( saveButton.enabled )
				{
					
					alertClose.open( this, true );
					alertClose.height = this.height
					alertClose.width = this.width;
					
					// Center the pop-up in the parent container.
					PopUpManager.centerPopUp(alertClose);
					
					
					
					
					
					
				}
				else
				{
					
					// project is already saved.
					closeProject();
					
				}
				
				
			}
			
			
			protected function closeProject(e:Event=null):void
			{
				
				//trace("ProjectMaster - closeProject");
				Dispatcher.dispatchEvent( new AppEvent( AppEvent.CLOSE_PROJECT, true ) );
				
			}

			
			
			protected function _onAudioFileSelected(e:Event=null):void
			{
				
				
				trace( "ProjectCreator - _onSelected()" );
				//trace( e );
				trace( e.currentTarget );
				
				var f:File = e.currentTarget as File;
				
				
				AppModel.copyMusic( AppModel.PID, f );
				
				
				
				return;
				
				
				
				f.load();
				
				f.addEventListener(Event.COMPLETE, _onFileLoaded );
				
				
				//new URLRequest( ( e.currentTarget as File ).nativePath );
				/*
				var s:Sound = new Sound( new URLRequest( ( e.currentTarget as File ).nativePath ) );
				
				trace(s);
				
				*/
				_loader = new LoaderMax( { onComplete:_onSoundLoaded } );
				_loader.append( new MP3Loader( new URLRequest( ( e.currentTarget as File ).nativePath ) ) );
				_loader.load();
				
				
				
				// OK, we can grab the native path to the file here.
				
				// Do we need to load it? Does it contain the file already?
				
				// Save it to the model.
				
				
				
				
			}
			
			
			
			
			
			protected function _onFileLoaded(e:Event):void
			{
				
				trace("ProjectMaster - _onFileLoaded");
				
				trace( ( e.currentTarget as File ).nativePath );
				trace( ( e.currentTarget as File ).data.length );
				
				
				// Save reference in the XML doc.
				
				// Save loaded file in project directory in audio folder.
				
				// Reload as sound to play.
				
				// Always check to see if it exists.
				
				// Make sure there is a way to delete file if no longer needed or new sound is loaded.
				
				
			}
			
			
			protected function _onSoundLoaded(e:Event):void
			{
				
				trace("ProjectMaster - _onSoundLoaded");
				
				
				
			}
			
			
			protected function _loadMusic(e:Event=null):void
			{
				
				trace("ProjectMaster - _loadMusic");
				
				
				
				_audioFile = new File;
				_audioFile.addEventListener( Event.SELECT, _onAudioFileSelected );
				_audioFile.browse(  );//[ ".mp3" ]
				
				
				
				
				
				/*
				if( contains( audioPlayer ) ) removeElement( audioPlayer );
				else 
				{
					
					addElementAt( audioPlayer, getElementIndex( hControls ) + 1 );
					audioPlayer.update();
					
				}
				*/
			}

			
			protected function toggleViewAudio(e:Event=null):void
			{
				
				trace("ProjectMaster - toggleViewAudio");
				
				
				if( contains( audioPlayer ) ) removeElement( audioPlayer );
				else 
				{
					
					addElementAt( audioPlayer, getElementIndex( hControls ) + 1 );
					audioPlayer.update();
					
				}
				
			}
			
			
			public function clear():void
			{
				
				trace("ProjectMaster - clear");
				docTitle.text = "";
				docContent.text = "";
				
			}
			
			
		]]>
	</fx:Script>
	
	<s:HGroup id="hgroup" verticalAlign="middle" horizontalAlign="right" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" width="100%">
		<s:Label>Title</s:Label>
		<s:TextInput id="docTitle" width="100%" height="36" needsSoftKeyboard="true" change="onProjectChange()" />
		<s:Button
			id="saveButton" label="Save"
			click="saveText();"
			/>
		<s:Button
			id="closeButton" label="Close"
			click="initCloseProject()"
			/>
	</s:HGroup>
	
	<s:HGroup id="hControls" verticalAlign="middle" horizontalAlign="center" paddingBottom="0" paddingLeft="5" paddingRight="5" paddingTop="0" width="100%">
		<s:ToggleButton width="100%" height="30"
						id="showMediaButton" label="SHOW MEDIA"
						click="toggleViewAudio()"
						/>
		<s:ToggleButton width="100%" height="30"
						id="loadAudioButton" label="LOAD MUSIC"
						click="_loadMusic()"
						/>
	</s:HGroup>
	
	<media:AudioPlayer id="audioPlayer" />
	<s:TextArea id="docContent" width="100%" height="100%" needsSoftKeyboard="true" change="onProjectChange()" />
	<!--<s:Label id="myLabel" width="180" fontWeight="bold" fontSize="24"/>-->
	
	
</s:SkinnableContainer>
