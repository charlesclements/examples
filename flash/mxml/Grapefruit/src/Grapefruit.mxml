<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   initialize="init()"
					   xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<fx:Script>
		<![CDATA[
			
			
			// Vars
			private var sourceFolder:File;
			private var sourceFolderSelected:Boolean = false;
			private var destFolder:File;
			private var destFolderSelected:Boolean = false;
			private var SO:SharedObject;
			private var dict:Dictionary;
			
			
			// Start it off.
			private function init():void
			{
				
				// Crate Dictionay for ComboBoxes.
				dict = new Dictionary;
				
				// Grab the SharedObject.
				SO = SharedObject.getLocal("GRAPEFRUIT");
				
				// Create those boxes.
				createCheckBoxes();
				
			}
			

			private function selectDestinationPath():void
			{
				
				trace("selectDestinationPath");
				
				destFolder = new File;
				destFolder.addEventListener( Event.SELECT, onSelectedDest );
				destFolder.browseForDirectory( "Choose source folder" );
				
			}
			
			
			private function selectDirectoryToCopy():void
			{
				
				trace("selectDirectoryToCopy");
				
				sourceFolder = new File;
				sourceFolder.addEventListener( Event.SELECT, onSelectedSrc );
				sourceFolder.browseForDirectory( "Choose source folder" );
				
			}
			
			
			private function onSelectedSrc(e:Event):void
			{
				
				trace("onSelectedSrc");
				
				srcDir.text = sourceFolder.nativePath;
				
				sourceFolderSelected = true;
				
			}
			
			
			private function onSelectedDest(e:Event):void
			{
				
				trace("onSelectedDest");
				
				destDir.text = destFolder.nativePath;
				destFolderSelected = true;
				
			}
			
			
			private function copyDirectory():void
			{
				
				trace("copyDirectory");
				
				if( sourceFolderSelected && destFolderSelected )
				{
					
					trace("copyDirectory - Do copying.");
					
					
					
					
					for ( var i:String in SO.data.sizes ) 
					{ 
						
						
						
						if( SO.data.sizes[ i ].selected )
						{
							
							// Create new folder.
							var str:String = String( destFolder.nativePath + "/" + i );
							var newFolder:File = new File( str );
							if( !newFolder.exists ) newFolder.createDirectory();
							
							// Copy files.
							sourceFolder.copyTo( newFolder, true );
							
							
							
							
						}
						
						
						
					}
					
					
					
					
					
					
					
					
					
					
				}
				
			}
			
			private function submitNewSize():void
			{
				
				trace("submitNewSize");
				
				if( widthTxt.text.length > 0 && heightTxt.text.length > 0 )
				{
					
					trace("submitNewSize - Creating new size.");
					
					var key:String = String( widthTxt.text + "x" + heightTxt.text );
					
					// Check first to see if sizes exists.
					if( SO.data.sizes == undefined || !SO.data.sizes )
					{
						
						SO.data.sizes = {};
						
					}
					
					// Save new size in SharedObject.
					if( SO.data.sizes[ key ] == undefined || !SO.data.sizes[ key ] )
					{
						
						SO.data.sizes[ key ] = { id:key, height:heightTxt.text, width:widthTxt.text, selected:true };
						
					}
					
				}
				else return;
				
				// Create those boxes.
				createCheckBoxes();
				
				// Reset textfields.
				widthTxt.text = "";
				heightTxt.text = "";
				
			}
			
			
			private function createCheckBoxes():void
			{
				
				trace("createCheckBoxes");
				
				// Clear/delete current checkboxes.
				sizes.removeAllElements();
				
				// Add check boxes.
				for ( var i:String in SO.data.sizes ) 
				{ 
					
					if( SO.data.sizes[i] == null )
					{
						
						delete SO.data.sizes[i];
						continue;
						
					}
					
					if( dict[ i ] == undefined )
					{
						
						dict[ i ] = { checkbox:new CheckBox, selected:true };
						
					}
					
					// Set vars.
					var c:CheckBox = dict[ i ].checkbox as CheckBox;
					//return;
					c.selected = SO.data.sizes[i].selected;
					c.label = i;
					c.addEventListener( MouseEvent.CLICK, checkboxClick );
					
					// Add to container.
					sizes.addElement( c );
					
				}
				
			}
			
			
			private function selectAll(e:Event=null):void
			{

				trace("selectAll");
				
				// Add check boxes.
				for ( var i:String in SO.data.sizes ) 
				{ 
					
					var c:CheckBox = dict[ i ].checkbox as CheckBox;
					SO.data.sizes[ i ].selected = c.selected = true;

				}
				
			}

			
			private function selectNone(e:Event=null):void
			{

				trace("selectNone");
				
				// Add check boxes.
				for ( var i:String in SO.data.sizes ) 
				{ 
					
					var c:CheckBox = dict[ i ].checkbox as CheckBox;
					SO.data.sizes[ i ].selected = c.selected = false;

				}
				
			}


			private function removeSelected(e:Event=null):void
			{

				trace("removeSelected");
				
				// Add check boxes.
				for ( var i:String in SO.data.sizes ) 
				{ 
					
					if( SO.data.sizes[ i ].selected )
					{
						
						SO.data.sizes[ i ] = undefined;
						SO.data.sizes[ i ] = null;
						delete SO.data.sizes[ i ];
						dict[ i ] = null;
						
					}
					
				}
				
				createCheckBoxes();
				
			}


			private function checkboxClick(e:Event):void
			{
				
				trace("checkboxClick " + ( e.currentTarget as CheckBox ).label);
				
				var i:String = ( e.currentTarget as CheckBox ).label;
				SO.data.sizes[i].selected = ( e.currentTarget as CheckBox ).selected;
				SO.flush( 10000 );
				
			}
			
			
		]]>
	</fx:Script>
	
	
	
	
	<s:VGroup id="content">
		
		<s:HGroup>
			<s:BorderContainer>
				
				<s:VGroup id="sizes">
					<s:CheckBox width="100" label="Employee?"/> 
				</s:VGroup>
				
			</s:BorderContainer>
			<s:VGroup>
				<s:Button id="selectAllButton" width="150" label="Select all" click="selectAll();"></s:Button>
				<s:Button id="selectNoneButton" width="150" label="Select none" click="selectNone();"></s:Button>
				<s:Button id="removeSelectedButton" width="150" label="Remove selected" click="removeSelected();"></s:Button>
			</s:VGroup>
		</s:HGroup>
		
		
		<s:HGroup>
			<s:Label text="Width"></s:Label>
			<s:TextInput id="widthTxt" width="100" restrict="0-9"></s:TextInput>
			<s:Label text="Height"></s:Label>
			<s:TextInput id="heightTxt" width="100" restrict="0-9"></s:TextInput>
		</s:HGroup>
		<s:HGroup>
			<s:Button id="sizeButton" width="150" label="Submit new size" click="submitNewSize();"></s:Button>
			<!--<s:Button id="removeSizesButton" width="150" label="Remove selected sizes" click="removeSizes();"></s:Button>-->
		</s:HGroup>
		
		<s:Label text="Source"></s:Label>
		<s:HGroup>
			<s:TextInput id="srcDir" width="200" text="Use this directory."></s:TextInput>
			<s:Button id="srcDirButton" width="70" label="Select" click="selectDirectoryToCopy();"></s:Button>
		</s:HGroup>
		
		
		<s:Label text="Destination"></s:Label>
		<s:HGroup>
			<s:TextInput id="destDir" width="200" text="Copy files to this directory."></s:TextInput>
			<s:Button id="destDirButton" width="70" label="Select" click="selectDestinationPath();"></s:Button>
		</s:HGroup>
		<s:CheckBox label="Remember destination"/> 
		
		<s:Button id="copyButton" width="120" label="Copy Files" click="copyDirectory();"></s:Button>
		
	</s:VGroup>
	
	
</s:WindowedApplication>
