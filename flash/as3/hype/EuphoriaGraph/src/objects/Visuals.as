package objects{		// Imports	import com.greensock.TimelineMax;	import com.greensock.TweenMax;	import com.greensock.easing.Linear;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.filters.BlurFilter;	import flash.geom.Point;		import hype.extended.behavior.FunctionTracker;	import hype.extended.color.ColorPool;	import hype.extended.layout.GridLayout;	import hype.extended.rhythm.FilterCanvasRhythm;	import hype.framework.core.ObjectPool;	import hype.framework.core.TimeType;	import hype.framework.display.BitmapCanvas;	import hype.framework.sound.SoundAnalyzer;
			public class Visuals extends Sprite	{						// Vars		private var bmc1:BitmapCanvas;		private var bmc2:BitmapCanvas;		private var _w:uint;		private var _h:uint;		private var clipContainer:Sprite;		private var centerPoint:Point;		private var _sounds:Array = [];		private var _rings:Array = [];		private var _totalRings:uint = 17;		private var _timeline:TimelineMax;		private var _soundAnalyzer:SoundAnalyzer;		private var _totalClipsInRow:uint = 102;		private var _bgColor:uint = 0x333333;		private var _hypeAssets:Array = [];		private var _functionTrackers:Array = [];		private var _spacing:uint = 14;						// Conaructor.		public function Visuals()		{						super();			trace("new Visuals");					}						// Initialize.		public function intitialize(data:Object):void		{						trace("Visuals intitialize");						// Vars form the data Object.			x = data.x;			y = data.y;			_w = data.w;			_h = data.h;						// Add BitmapCanvas for capture.			bmc1 = new BitmapCanvas( _w, _h );//, false, 0xff0000 			addChildAt( bmc1, 0 );						// Draw a BG graphic.			clipContainer = new Sprite();						// Create equalizer here.			_soundAnalyzer = data.soundAnalyzer;			for( var i:uint = 0; i < 8; i++ )			{								_hypeAssets.push( { pool:new ObjectPool( SoundBar, _totalClipsInRow ), grid:new GridLayout( 5, 242, _spacing, 0, _totalClipsInRow) } );				_hypeAssets[ i ].pool.onRequestObject = function(clip) 				{										( clip as SoundBar ).spacing = _spacing;					_hypeAssets[ i ].grid.applyLayout(clip);					clip.name = "clip_" + i + "_" + ( _hypeAssets[ i ].pool.activeSet.length - 1 );					// Color the inside of the clip.					( new ColorPool( [ 0x00bbd6 ] ) ).colorChildren(clip);					// Create FunctionTrackers here.					_functionTrackers.push( new FunctionTracker( clip, "progress", _soundAnalyzer.getFrequencyIndex, [ _hypeAssets[ i ].pool.activeSet.length - 1, 0, 0.75 ] ) );					clipContainer.addChildAt( clip, 0 );									}				_hypeAssets[ i ].pool.requestAll();							}						// Call all the FunctionTracker to start.			startFunctionTrackers();			// Start capturing Display.			//bmc1.startCapture(clipContainer, false, "enter_frame", 2 );					}						public function startFunctionTrackers():void		{						trace("startFunctionTrackers : " + _functionTrackers.length);			var c:SoundBar;			for( var i:uint = 0; i < _functionTrackers.length; i++ )			{								c = clipContainer.getChildAt( i ) as SoundBar;				c.visible = true;				_functionTrackers[ i ].start();							}			// Start capturing Display.			bmc1.startCapture( clipContainer, false, "enter_frame", 2 );					}				public function stopFunctionTrackers():void		{						trace("stopFunctionTrackers : " + _functionTrackers.length);						var i:uint = 0;			for( i = 0; i < _functionTrackers.length; i++ )			{								_functionTrackers[ i ].stop();							}									var l:uint = clipContainer.numChildren;			var delay:Number = 0.2;			var time:Number = 0.7;			var c:SoundBar;						for( i = 0; i < l; i++ )			{								c = clipContainer.getChildAt( i ) as SoundBar;								c.visible = false;								//TweenMax.to( c, 0, { progress:1 } );				//TweenMax.to( c, time, { progress:0 } );//, delay:delay * i																											}						//TweenMax.to( {}, 0, { delay:time + ( delay * i ), onComplete:bmc1.stopCapture } );															// Stop capturing Display.			//bmc1.stopCapture();					}			}	}