package{			import com.bedrock.framework.plugin.util.ButtonUtil;	import com.demonsters.debugger.MonsterDebugger;	import com.greensock.TweenMax;	import de.danielyan.twitterAppOnly.TwitterSocket;	import events.TwitterEvent;	import flash.display.MovieClip;	import flash.display.StageAlign;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.ui.Mouse;	import hype.framework.core.TimeType;	import models.TweetModel;	import net.charlesclements.behaviour.Sequencer;	import settings.Settings;	import views.TwitterView;	
		public class TwitterChannel extends MovieClip	{						public var timing:TextField;		public var twitterView:TwitterView;		private var _twitterModel:TweetModel;		private var _twitterSocket:TwitterSocket;		public var bg:MovieClip;		public var twitterLogo:MovieClip;		public var seq:Sequencer		public var timerStarted:Boolean = false;		private var _count:uint = 30;		private var _request:String;						public function TwitterChannel()		{						initialize();					}						public function initialize($data:Object=null):void		{						trace(this + " : initialize");			MonsterDebugger.initialize( this );			MonsterDebugger.trace(this, "initialize");			setStageSettings();			twitterView.addEventListener( TwitterEvent.TIMING_START, onTwitterEvent );			twitterView.addEventListener( TwitterEvent.TIMING_UPDATE, onTwitterEvent );			twitterView.addEventListener( TwitterEvent.TIMING_COMPLETE, onTwitterEvent );			twitterView.initialize( { font:new Stratum1, fontColor:0x000000, bgColor:0x000000, exitShape:bg } );			ButtonUtil.addListeners( twitterLogo, { over:twitterlogoStuff, out:twitterlogoStuff, down:twitterlogoStuff } );			Mouse.hide();			seq = new Sequencer(timing, "visible", [ true, false ] );			seq.start( TimeType.TIME, Settings.DEFAULT_TWITTER_REFRESH_TIME );			// TwitterModel stuff.			_twitterModel = new TweetModel;			_twitterModel.addEventListener( TwitterEvent.DATA_PARSED, onTwitterEvent );			_twitterModel.addEventListener( TwitterEvent.AUTO_LOGIN_FAIL, onTwitterEvent );			_twitterModel.initialize( { screenname:"miamichildrens", sharedObjectPath:"imt.mch.apps.twitter_channel" } );					}						// Set up everything that has to do with the stage sizing, scaling and positioning.		private function setStageSettings():void		{						stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_BORDER;						// Fullscreen.			// Still will not allow typing when in FullScreen mode.			stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;						//stage.displayState = StageDisplayState.FULL_SCREEN;					}				// Set up everything that has to do with the stage sizing, scaling and positioning.		private function toggleStageSettings():void		{						MonsterDebugger.trace( this, "toggleStageSettings : " + ( stage.displayState != StageDisplayState.FULL_SCREEN_INTERACTIVE ) );			if( stage.displayState != StageDisplayState.FULL_SCREEN_INTERACTIVE )			{									stage.align = StageAlign.TOP_LEFT;				stage.scaleMode = StageScaleMode.NO_BORDER;				stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;							}			else			{				stage.displayState = StageDisplayState.NORMAL;							}					}						private function onTwitterEvent($e:TwitterEvent):void		{						switch( $e.type )			{								case TwitterEvent.TIMING_START:					seq.stop();					timing.text = String( Settings.DEFAULT_TWITTER_REFRESH_TIME );					timing.visible = true;					timing.alpha = 1					break;								case TwitterEvent.TIMING_UPDATE:					if( timerStarted )					{												timerStarted = true;						seq.stop();						timing.visible = false;						timing.alpha = 1											}					var t:Number = ( $e.details.targTime - $e.details.time );					timing.text = String( t ).slice( 0, 6 );					break;								case TwitterEvent.TIMING_COMPLETE:					timing.text = "Now checking for Twitter updates.";					seq.start( TimeType.TIME, Settings.DEFAULT_TWITTER_REFRESH_TIME );					timing.visible = true;					timing.alpha = 1					timerStarted = false;					_twitterModel.update();					break;								case TwitterEvent.DATA_PARSED:					MonsterDebugger.trace( this, $e.type );					twitterView.update( _twitterModel.tweets );					break;								case TwitterEvent.AUTO_LOGIN_FAIL:					MonsterDebugger.trace( this, $e.type );					timing.text = "No connection...";					break;							}					}						private function twitterlogoStuff($e:MouseEvent):void		{						MonsterDebugger.trace( this, "twitterlogoStuff" );			switch( $e.type )			{								case MouseEvent.MOUSE_DOWN:					MonsterDebugger.trace( this, $e.type );					toggleStageSettings();					break;								case MouseEvent.MOUSE_OUT:					TweenMax.to( twitterLogo, 0.25, { scaleX:0.25, scaleY:0.25 } );					break;								case MouseEvent.MOUSE_OVER:					TweenMax.to( twitterLogo, 0.25, { scaleX:0.5, scaleY:0.5 } );					break;							}					}						private function hideMouse($e:MouseEvent):void		{						trace("hideMouse")			Mouse.hide();					}			}		}