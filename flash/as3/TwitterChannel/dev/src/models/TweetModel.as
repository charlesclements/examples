package models{		//import com.demonsters.debugger.MonsterDebugger;	import com.greensock.TweenMax;	import de.danielyan.twitterAppOnly.TwitterSocket;	import de.danielyan.twitterAppOnly.TwitterSocketEvent;	import events.TwitterEvent;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.net.SharedObject;	import flash.text.StyleSheet;		public class TweetModel extends MovieClip//View	{				// Variables		private var _data:Object = {};		private var _twitter:TwitterSocket;		private var _count:uint = 30;		private var _request:String;		private var _screenname:String = "intermediatouch";		private var _tweets:Array;		private var _timer:TweenMax;		public var css:StyleSheet;		private var searchTerms:Array;		private var _cookie:SharedObject;						public function TweetModel()		{						super();			trace(this + " : TweetModel");			//MonsterDebugger.trace( this, "TweetModel" );					}						public function initialize($data:Object=null):TweetModel		{						trace(this + " : initialize");			//MonsterDebugger.trace( this, "initialize" );			_data = $data;			if( _data.screenname ) _screenname = _data.screenname			setupCookie().setupTwitter();			// Check for updates.			//_timer = TweenMax.to( {}, 30, { repeat:0, onComplete:checkForUpdates } ); 			//_timer.pause();			return this;					}						private function checkForUpdates():void		{						trace("checkForUpdates");			// Restart timer.			//_timer.restart();					}				/*		// Do visual setup.		private function setupCSS():void		{						trace(this + " : setupCSS");			css = new StyleSheet;			var f:Function = onHandle;			var l:LoaderMax = new LoaderMax( {name:"myCSS", onComplete:onHandle, onError:onHandle} );//LoaderMaxVars("css",f,f,f)			var url:String = ( Capabilities.playerType == 'External' ) ? "css/styles.css" : "assets/css/styles.css";			l.append( new CSSLoader( url ) );			l.load();					}						private function onHandle($e:LoaderEvent):void		{						trace(this + " onHandle: " + $e.type )			css = LoaderMax.getContent("myCSS") as StyleSheet;					}*/				// Do setup for Twitter.		private function setupTwitter():TweetModel		{						trace(this + " : setupTwitter");			//MonsterDebugger.trace(this,"setupTwitter");			// This is the requst to be reused including the _count of tweets.			_request = "/1.1/statuses/user_timeline.json?count="+ _count +"&screen_name="+_screenname;									trace(_request);						//_twitter = new TwitterSocket( "9syskTUk9B5aouKoPsw", "LsN2chhjV6eJi0bdl3YUkJpmOqgQxQOXFwNwBXQlRw" );			_twitter = new TwitterSocket( "OJmp2bq0kHzYhKI2rTkqtw", "JbtElmIucntvEanGdI3uVotNjUYfmE2uiuesPkOc9wY" );			_twitter.addEventListener(IOErrorEvent.IO_ERROR, _onError);			_twitter.addEventListener(TwitterSocket.EVENT_TWITTER_READY, _onEvent);			_twitter.addEventListener(TwitterSocket.EVENT_TWITTER_RESPONSE, _onTwitterData);			return this;					}						// Do setup for Twitter.		private function setupCookie():TweetModel		{						trace(this + " : setupCookie");			//MonsterDebugger.trace(this,"setupCookie");			// Get / Create local SharedObject.			var path:String = ( _data.sharedObjectPath ) ? _data.sharedObjectPath : "imt.temp";			_cookie = SharedObject.getLocal( path, "/" );//"imt.mch.twitter_channel"			return this;					}						private function _onError(e:IOErrorEvent):void		{						//MonsterDebugger.trace( this, e );			trace( this + "_onError" );			trace( e );			// Use cookie data.			// Check if data exists.			if ( _cookie.data.tweets != null )			{								_tweets = _cookie.data.tweets;				// Let everyone know its ready.				dispatchEvent( new TwitterEvent( TwitterEvent.DATA_PARSED, this ) );							}			else 			{								trace(this + " : No Tweets stored in SharedObject.");				//MonsterDebugger.trace( this, "No Tweets stored in SharedObject." );				// Dispatch failure.				dispatchEvent( new TwitterEvent( TwitterEvent.AUTO_LOGIN_FAIL, this ) );							}						// Do we need this or is it taken care of in another class?			TweenMax.to( {}, 60, {  onComplete:_twitter.request, onCompleteParams:[ _request ] } );					}						private function _onEvent(e:Event):void		{						switch(e.type)			{								case TwitterEvent.TIMING_COMPLETE:					_twitter.request( _request );					break								case TwitterSocket.EVENT_TWITTER_READY:					//MonsterDebugger.trace( this, "_onTwitterReady" );					// place your twiter requests here					_twitter.request( _request );					break;							}					}						private function _onTwitterData(event:TwitterSocketEvent):void		{						trace( this + "_onTwitterData" );			trace( event );			//MonsterDebugger.trace( this, "_onTwitterData" );			//MonsterDebugger.trace( this, event.response as Array );			parseData( event.response as Array );						// Do we need this or is it taken care of in another class?			//TweenMax.to( {}, 60 * 2, {  onComplete:_twitter.request, onCompleteParams:[ _request ] } );					}						public function update():void		{						//MonsterDebugger.trace( this, "update" );			_twitter.request( _request );					}						// Parses XML into useable data.		private function parseData($data:Array):void		{						trace("parseData");			//MonsterDebugger.trace( this, "parseData" );			var arr:Array = [];			for(var i:uint = 0; i < $data.length; i++)			{								arr.push( { screen_name:$data[ i ].user.screen_name, text:$data[ i ].text } );							}			_tweets = arr;			// Announce data parsing.			dispatchEvent( new TwitterEvent( TwitterEvent.DATA_PARSED, this ) );			saveCookie();			//MonsterDebugger.trace( this, "parseData complete" );					}						// Getter for current available tweets.		public function get tweets():Array		{						return _tweets;					}						// Saves this Twitter information to a SharedObject. Pass a value of false to clear it.		public function saveCookie($state:Boolean=true):Boolean		{						trace("saveCookie : "+$state);			//MonsterDebugger.trace( this, "saveCookie" );			_cookie.clear();			_cookie.data.tweets = tweets;			_cookie.flush();			return $state					}						public function clear():void		{			trace(this + " : clear")			_cookie.clear();			//_twitter.destroy();					}			}}