package views{			import com.bedrock.extras.util.MathUtil;	import com.bedrock.framework.plugin.storage.SuperArray;	import com.demonsters.debugger.MonsterDebugger;	import com.greensock.TweenMax;	import com.greensock.easing.Circ;	import com.greensock.easing.Quad;	import events.TwitterEvent;	import flash.desktop.NativeApplication;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageDisplayState;	import flash.events.MouseEvent;	import flash.text.Font;	import hype.extended.behavior.VariableVibration;	import hype.extended.trigger.ExitShapeTrigger;	import hype.framework.core.ObjectPool;	import hype.framework.rhythm.SimpleRhythm;	import net.charlesclements.gadgets.text.RandomizerTextfield;	import net.charlesclements.gadgets.text.StatusField;	import settings.Settings;			public class TwitterView extends MovieClip	{						private var _data:Object = {};		private var _font:Font = new Stratum1;		public var status:StatusField;		private var _lines:Sprite;		private var _pool:ObjectPool		private var _clips:SuperArray;		private var _total:uint = 1;		private var _exitShape:Sprite;		private var _timer:Object;		private var _lastSearch:String;		public var defaultSearch:String = "miamichildrens";		private var _clipsContainer:Sprite;		private var _firstObjCreated:Boolean = false;		private var _startMark:RandomizerTextfield;		private var _bottomMark:RandomizerTextfield;		private var _lastMarker:RandomizerTextfield;		private var _rhythm:SimpleRhythm;						// Constructor.		public function TwitterView()		{						super();			trace(this)			MonsterDebugger.trace( this, "TwitterView" );					}						public function initialize( $data:Object ):void		{						trace("initialize")			MonsterDebugger.trace( this, "initialize" );			MonsterDebugger.trace( this, $data );			//MonsterDebugger.trace( this, $data.font );									_data = $data									if( $data.font ) _font = $data.font;						_clipsContainer = new Sprite;			addChild( _clipsContainer );			// Exit shape to restart anime.			_exitShape = new Sprite;			var b:Bitmap = new Bitmap( new BitmapData( Settings.MAP_WIDTH, Settings.MAP_WIDTH, true ) );			b.alpha = 0;			_exitShape.addChild( b );			addChild( _exitShape );			_lastMarker = _startMark;			_lines = new Sprite;			addChild( _lines );			// Create Pools stuff for Hype.			_pool = new ObjectPool( [], _total );			_clips = new SuperArray( [] );			// Start Hype rhythm.			_rhythm = new SimpleRhythm( run );					}						// Gets called continously.		private function run($o:Object=null):void		{						//drawLines();					}				// Search the time;line of a specific user.		private function onExitApp($e:MouseEvent):void		{						NativeApplication.nativeApplication.exit();					}		// Search the time;line of a specific user.		private function onFullscreen($e:MouseEvent):void		{						stage.displayState = ( stage.displayState == StageDisplayState.FULL_SCREEN_INTERACTIVE || stage.displayState == StageDisplayState.FULL_SCREEN ) ? StageDisplayState.NORMAL : StageDisplayState.FULL_SCREEN_INTERACTIVE;					}				private function destroyCurrentObjects():void		{						trace("destroyCurrentObjects - START");						// activeSet is only what is seen on stage.			var l:uint = _pool.activeSet.length;						for (var i:uint = 0; i < l; i++)			{								var t:RandomizerTextfield = _pool.activeSet.pull().clear() as RandomizerTextfield;				t = null;							}						_pool.destroy();						trace("destroyCurrentObjects - END");					}						public function update($arr:Array):void		{						trace("update");			MonsterDebugger.trace(this,"update");						var arr:Array = [];						for( var i:uint = 0; i < $arr.length; i++ )			{								arr.push( { content:( $arr[i].screen_name + " - " + $arr[i].text ), screen_name:$arr[i].screen_name } );							}						// Store tweets.			_clips.clear();			_clips = new SuperArray( arr );			_clips.wrapIndex = true;			_clips.setSelected( -1 );						// Is the pool full (all objects in activeSet)?			var spawn:Boolean = ( _pool.isFull ) ? false : true;						// Add condition here to see if a new ObjectPool really needs to be created.						// Destroy all objects that currently exist in pool.			destroyCurrentObjects();			_pool = new ObjectPool( [ RandomizerTextfield ], _total );			_pool.onRequestObject = onRequestObject;			_pool.request();						// Recheck in timer.			doTimer();					}						//		private function doTimer():void		{			// Timer to update tweets.			_timer = { time:0, targTime:Settings.DEFAULT_TWITTER_REFRESH_TIME };			TweenMax.to( _timer, _timer.targTime, { time:_timer.targTime, ease:Quad.easeIn, onStart:onTimeStart, onUpdate:onTimeUpdate, onComplete:onTimeComplete } );					}						//		private function onTimeStart():void		{						dispatchEvent( new TwitterEvent( TwitterEvent.TIMING_START, this, {time:Number( _timer.time ), targTime:_timer.targTime } ) );					}						//		private function onTimeUpdate():void		{						dispatchEvent( new TwitterEvent( TwitterEvent.TIMING_UPDATE, this, {time:Number( _timer.time ), targTime:_timer.targTime } ) );					}				//		private function onTimeComplete():void		{						dispatchEvent( new TwitterEvent( TwitterEvent.TIMING_COMPLETE, this, {time:uint( _timer.time ), targTime:_timer.targTime } ) );		}						private function onRequestObject($clip:RandomizerTextfield):void		{						MonsterDebugger.trace( this, "onRequestObject" );			MonsterDebugger.trace( this, $clip );						TweenMax.killTweensOf( $clip );			$clip.visible = false;						_clipsContainer.addChild( $clip );						// Using random range function.			var r:Function = MathUtil.randomRange;			var o:Object = _clips.selectNext();			$clip.initialize( { fontColor:_data.fontColor, bgColor:_data.bgColor, font:_font, width:600, size:35, speed:30, step:20, searchTerms:[ o.screen_name ] } ).addText( o.content );			$clip.x = Settings.TWITTER_WIDTH/2;			$clip.y = Settings.TWITTER_HEIGHT/2 - 150;			$clip.visible = true;			$clip.alpha = 1;			$clip.scaleX = $clip.scaleY = 3;			addChild( $clip );						var xVib:VariableVibration = new VariableVibration($clip, "x", 0.99, 0.03, 2);			var yVib:VariableVibration = new VariableVibration($clip, "y", 0.99, 0.03, 3);			//var seq:Sequencer = new Sequencer($clip,, "y", 0.99, 0.03, 3);			xVib.start();			yVib.start();						TweenMax.to( $clip, 1.5, { delay:(_firstObjCreated)?10:0, scaleX:0.2, scaleY:0.2, ease:Circ.easeIn, onComplete:onExitShape, onCompleteParams:[ $clip ] } );						$clip.visible = true;						// exit callback function, target Object, shape, shapeFlag			var onExit:ExitShapeTrigger = new ExitShapeTrigger( onExitShape, $clip, _exitShape, true);			onExit.start();									_firstObjCreated = true;					}				/*		// Shows the Login panel.		public function showLogin($e:Object):void		{						trace("showLogin")			MonsterDebugger.trace( this, "showLogin" );						if( contains( twitterLogin ) )			{								removeChild( twitterLogin );				Mouse.hide();							}			else 			{								//addChild( twitterLogin );				Mouse.show();							}					}		*/				// Called when shape leaves area.		private function onExitShape($clip:RandomizerTextfield):void		{						_pool.release($clip);			if( contains( $clip ) ) removeChild($clip);			// Call next shape.			_pool.request();					}				/*		// Draws a line to the target.		private function drawLines():TwitterView		{						_lines.graphics.clear();			_pool.activeSet.forEach( draw );			//draw( _bottomMark );			_lastMarker = _startMark;			return this;					}						// Draws a line to the target.		private function draw($o:RandomizerTextfield):void		{						var itemPoint:Array = [ new Point( _lastMarker.x, _lastMarker.y ), new Point( $o.x, $o.y ) ];			// Get dimensions (absolute)			var d:Point = itemPoint[0].subtract(itemPoint[1]);			d.x = Math.abs(d.x);			d.y = Math.abs(d.y);			// Create gradient box matrix			var mtx : Matrix = new Matrix;			mtx.createGradientBox(d.x, d.y, Math.atan2(d.y, d.x), itemPoint[0].x, itemPoint[0].y);			// Graphics			with( _lines.graphics )			{				lineStyle( 0.5 );				_lines.graphics.lineGradientStyle(GradientType.LINEAR, [0x07A6D0, 0x07A6D0], [ _lastMarker.alpha, $o.alpha ], [ 1, 1 ], mtx );				moveTo(itemPoint[0].x, itemPoint[0].y);				lineTo(itemPoint[1].x, itemPoint[1].y);			}			_lastMarker = $o;					}		*/	}	}