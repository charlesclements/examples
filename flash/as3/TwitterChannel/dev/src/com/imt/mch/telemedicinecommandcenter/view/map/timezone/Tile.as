package com.imt.mch.TeleMedicineCommandCenter.view.map.timezone{	import com.greensock.TimelineLite;	import com.greensock.TimelineMax;	import com.greensock.TweenMax;	import com.greensock.easing.Ease;	import com.greensock.easing.Linear;		import flash.display.MovieClip;	import flash.events.Event;		import settings.Settings;		public class Tile extends MovieClip	{				private var _index:uint;		private var _colorOrig:uint = 0x000000;		private var _colorStart:uint = 0x000000;//0x28F5FF;//0x00AAFF;//0x000093;		private var _colorEnd:uint = 0xffffff;//0x00AAFF		private var _colorTween:TimelineMax;		private var _total:int;		private var _alpha:Number;		private var _time:Number;				private var _increment:int = -1;				public function Tile()		{			super();		}						public function setup($index:uint, $total:int, $time:Number):Tile//, $alpha:Number=1		{						_total = $total;			_time = $time;			//alpha = _alpha = $alpha;						TweenMax.to( this, 0, { tint:_colorStart } );						_colorTween = new TimelineMax();			_colorTween.pause();			_colorTween.appendMultiple([								new TweenMax( this, 1, { tint:_colorEnd } ),				new TweenMax( this, 1, { tint:_colorStart } )								], 0, "sequence", 0	);						// Set index.			index = $index;						checkTime();						return this;		}						public function set index($index:uint):void		{						_index = $index;						//change( 1 );					}				public function get index():uint		{						return _index;					}						public function change($multiplier:uint):void		{						// Tween into position.			//var d:Number = _colorTween.totalDuration();// Duration.			var d:Number = _colorTween.totalDuration;			var t:Number = ( d / _total ) * ( $multiplier );// Time. + 1			var p:Number = t / d;// Progress.						TweenMax.to( _colorTween, _time, { currentProgress:p, ease:Linear.easeNone } );			var tm:TweenMax = TweenMax.to( {}, _time + 0.5, { onUpdate:onUpdate, onComplete:onComplete } );					}						public function checkTime():void		{						var h:uint = ( new Date().hoursUTC ) + index;			h = ( h < 24 ) ? h : h - 24;						if( !Settings.DEBUG )			{								change( h );							}			else			{								// debug				_increment++				_increment = ( ( _increment + h ) < 24 ) ? _increment : _increment - 24; 				change( uint( h + _increment ) );							}					}						private function onUpdate():void		{						dispatchEvent( new Event( Event.CHANGE ) );					}						private function onComplete():void		{						dispatchEvent( new Event( Event.COMPLETE ) );					}			}	}