package com.imt.mch.TeleMedicineCommandCenter.view.map.interactive.dialogue{	import com.bedrock.framework.core.dispatcher.BedrockDispatcher;	import com.bedrock.framework.core.event.GenericEvent;	import com.bedrock.framework.plugin.util.ButtonUtil;	import com.imt.mch.TeleMedicineCommandCenter.event.MapEvent;	import com.imt.mch.TeleMedicineCommandCenter.model.MapStore;		import fl.controls.Button;		import flash.events.MouseEvent;	import flash.text.TextField;
		//import mx.controls.Button;	public class AddMarkerDialogue extends AbstractDialogue	{						public var clickedX:int = 0;		public var clickedY:int = 0;		public var cancel:Button;		public var saveLocationBtn:Button;		public var labelTxt:TextField;		public var text1:TextField;		public var text2:TextField;		public var text3:TextField;		private var _isEditing:Boolean = false;		private var _details:Object;		private var _list:XMLList;								// 		public function AddMarkerDialogue()		{						super();			ButtonUtil.addListeners( saveLocationBtn, { down:onCreateLocation } );			ButtonUtil.addListeners( cancel, { down:onCancel } );			BedrockDispatcher.addEventListener( MapEvent.CLOSE_CONNECT_DIALOGUE, onCloseConnect );					}				//$xmlList:XMLList = null		public function editContent($details:Object):AddMarkerDialogue		{						trace(this + " : editContent - index:" + $details.index);						_details = $details;						// Save a copy of the child to be edited.			_list = new XMLList( ( _details.xml..location as XMLList )[ _details.index ] );						labelTxt.text = _list.label;			text1.text = _list.content.textline[0];			text2.text = _list.content.textline[1];			text3.text = _list.content.textline[2];						_isEditing = true;						return this;					}						//		private function onCreateLocation($e:MouseEvent):void		{						trace(this + " : onCreateLocation");						if( _isEditing != true ) BedrockDispatcher.dispatchEvent( new MapEvent( MapEvent.LOCATION_ADDED, this, { x:MapStore.getInstance().lastClickX, y:MapStore.getInstance().lastClickY, label:labelTxt.text, textline1:text1.text, textline2:text2.text, textline3:text3.text } ) );			else 			{								// Create final XML before calling MapEvent.LOCATION_EDITED				// Save a copy of the child to be edited.				_list = new XMLList( ( _details.xml..location as XMLList )[ _details.index ] );				_list.label = labelTxt.text;				_list.content.textline[ 0 ] = text1.text;				_list.content.textline[ 1 ] = text2.text;				_list.content.textline[ 2 ] = text3.text;								BedrockDispatcher.dispatchEvent( new MapEvent( MapEvent.LOCATION_EDITED, this, _details ) );							}						_isEditing = false;						onCancel();					}						private function onCancel($e:MouseEvent=null):void		{						trace(this + " : onCancel")						clear();						BedrockDispatcher.dispatchEvent( new MapEvent( MapEvent.CLOSE_WINDOW, this, {} ) );					}						private function onCloseConnect($e:GenericEvent=null):void		{						trace(this + " : onCloseConnect")			clear();					}						public function clear():AddMarkerDialogue		{						trace(this + " : clear");						labelTxt.text = "";			text1.text = "";			text2.text = "";			text3.text = "";						// Set focus to the top textfield.			// Make sure that it is on stage.			if(stage) stage.focus = labelTxt;						_isEditing = false;						return this;					}			}	}