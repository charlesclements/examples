package com.imt.mch.TeleMedicineCommandCenter.view.map.interactive.dialogue.schedule{		import com.bedrock.framework.core.dispatcher.BedrockDispatcher;	import com.bedrock.framework.core.event.GenericEvent;	import com.bedrock.framework.plugin.util.ButtonUtil;	import com.demonsters.debugger.MonsterDebugger;	import com.greensock.TweenMax;	import com.imt.framework.core.event.SiteEvent;	import com.imt.framework.display.Container;	import com.imt.framework.display.IDisplay;	import com.imt.framework.engine.data.SiteData;	import com.imt.framework.plugin.calendar.Calendar;	import com.imt.framework.plugin.slideshow.Slideshow;	import com.imt.mch.TeleMedicineCommandCenter.data.AppData;	import com.imt.mch.TeleMedicineCommandCenter.event.MapEvent;	import com.imt.mch.TeleMedicineCommandCenter.model.MapStore;	import com.imt.mch.TeleMedicineCommandCenter.view.map.interactive.dialogue.location.LocationInfoView;	import com.imt.mch.TeleMedicineCommandCenter.view.map.interactive.dialogue.nav.TopNavView;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.events.MouseEvent;	import flash.net.FileReference;	import flash.net.SharedObject;	import flash.text.TextField;	import flash.text.TextFieldType;	import flash.text.TextFormat;	import flash.utils.ByteArray;		import fl.controls.Button;	import fl.controls.CheckBox;	import fl.controls.ComboBox;	import fl.data.DataProvider;		import settings.Settings;
			public class ScheduleDialogueView extends Sprite implements IDisplay	{						// Variables.		public var nav:TopNavView;		public var locationInfo:LocationInfoView;		public var locationTxt:TextField;		public var mediaContainer:Sprite;		private var _slideshow:Slideshow;		private var _resizeTween:TweenMax;		private var _txtfmtRegular:TextFormat;		private var _txtfmtEdit:TextFormat;		public var myCalendar:Calendar;						// Constructor.		public function ScheduleDialogueView()		{			trace(this);					}						// Unused / Added for the Interface implementation.		public function intro():IDisplay{return this};		public function outro():IDisplay{return this};		public function destroy():IDisplay{return this};						public function initialize():IDisplay		{			trace(this + " : initialize");			nav.initialize();					locationInfo.input1.visible = false;			locationInfo.input2.visible = false;			locationInfo.txt1.visible = false;			locationInfo.txt2.visible = false;						locationInfo.suggestion0.visible=false;			locationInfo.suggestion1.visible=false;			locationInfo.suggestion2.visible=false;			locationInfo.suggestion3.visible=false;			locationInfo.suggestion4.visible=false;						myCalendar= new Calendar("Arial", 22);			// Get media going.			//_slideshow = new SlideshowClip;			//_slideshow.initialize();			return this;					}						// This is called at a defined time after the resize has finished.		private function _postResize():void		{						//trace(this + " : _postResize");			//mediaContainer.addChild( _slideshow );					}						// Handle the resizing event.		private function resizing($e:Event):void		{			/*			//trace(this + " : resizing");			if( contains( _slideshow ) )			{								//mediaContainer.removeChild( _slideshow );				_resizeTween = new TweenMax( {}, 0.5, { onComplete:_postResize } );							}			*/		}						public function refresh():IDisplay		{						trace(this + " : refresh");			stage.addEventListener( Event.RESIZE, resizing );			x = AppData.DIALOGUE_X;			y = AppData.DIALOGUE_Y;			scaleX = scaleY = AppData.DIALOGUE_SCALE;			BedrockDispatcher.addEventListener( MapEvent.EDIT, onEvent );			BedrockDispatcher.addEventListener( MapEvent.CANCEL, onEvent );			BedrockDispatcher.addEventListener( MapEvent.SAVE, onEvent );			nav.refresh();			locationInfo.input1.visible = false;			locationInfo.input2.visible = false;			locationInfo.txt1.visible = false;			locationInfo.txt2.visible = false;			locationInfo.txt1.text = locationInfo.input1.text = AppData.SELECTED_XMLLIST.label + "\n" + AppData.SELECTED_XMLLIST..textline[ 0 ] ;			locationInfo.txt2.text = locationInfo.input2.text = AppData.SELECTED_XMLLIST.label + "\n" + AppData.SELECTED_XMLLIST..textline[ 0 ] ;											return this;				}						public function start():IDisplay		{			mediaContainer.addChild(myCalendar);			//mediaContainer.addChild( _slideshow );			//_slideshow.refresh();			return this				}						public function clear():IDisplay		{						trace(this + " : clear");			nav.clear();			stage.removeEventListener( Event.RESIZE, resizing );			mediaContainer.removeChild(myCalendar);			//mediaContainer.removeChild( _slideshow );			return this				}						private function onEvent($e:Event):void		{						switch( $e.type )			{								case MapEvent.EDIT:					trace(this + " : onEvent : " + $e.type);					locationInfo.input1.visible = false;					locationInfo.input2.visible = false;					locationInfo.txt1.visible = false;					locationInfo.txt2.visible = false;					break;								case MapEvent.SAVE:					trace(this + " : onEvent : " + $e.type);					locationInfo.input1.visible = false;					locationInfo.input2.visible = false;					locationInfo.txt1.visible = false;					locationInfo.txt2.visible = false;					break;								case MapEvent.CANCEL:					trace(this + " : onEvent : " + $e.type);					locationInfo.input1.visible = false;					locationInfo.input2.visible = false;					locationInfo.txt1.visible = false;					locationInfo.txt2.visible = false;					break;							}					}			}	}