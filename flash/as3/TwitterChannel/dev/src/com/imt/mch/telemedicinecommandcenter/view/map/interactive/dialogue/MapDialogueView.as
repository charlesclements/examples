package com.imt.mch.TeleMedicineCommandCenter.view.map.interactive.dialogue{	import com.bedrock.framework.core.dispatcher.BedrockDispatcher;	import com.bedrock.framework.core.event.GenericEvent;	import com.bedrock.framework.plugin.util.ButtonUtil;	import com.greensock.TweenMax;	import com.imt.framework.display.Container;	import com.imt.framework.display.IDisplay;	import com.imt.mch.TeleMedicineCommandCenter.event.MapEvent;	import com.imt.mch.TeleMedicineCommandCenter.model.MapStore;		import fl.controls.Button;	import fl.controls.CheckBox;	import fl.controls.ComboBox;	import fl.data.DataProvider;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.events.MouseEvent;	import flash.net.FileReference;	import flash.net.SharedObject;	import flash.text.TextField;	import flash.text.TextFieldType;	import flash.utils.ByteArray;		import settings.Settings;		//import spark.components.ComboBox;			//import spark.components.ComboBox;			public class MapDialogueView extends Sprite implements IDisplay	{		// Variables.		public var close:Button;		public var closeAdv:Button;		public var closeAddLoc:Button;		public var openConnect:Button;		public var showOptionsBtn:Button;		public var showOptionsBtn2:Button;		public var closeConnect:Button;		public var clearSO:Button;		public var showAdvanced:Button;		//public var back:Button;		//public var options:Button;		public var so:Object;		private var _xml:XML;		public var dataProvider:DataProvider;				public var addmarker:AddMarkerDialogue;		public var advanced:AdvancedDialogue;		public var connect:ConnectionDialogue;		public var options:GenericDialogue;		public var homeLocation:ComboBox;		//public var remoteLocation:ComboBox;		//public var manageLocations:Button;		//public var fullscreen:CheckBox;				public var manage:GenericDialogue;		public var allLocations:ComboBox;		public var removeLocation:Button;		public var editLocation:Button;		public var addLocation:Button;		public var saveLocations:Button;		public var importLocations:Button;				private var _container:Container;						// Constructor.		public function MapDialogueView()		{						// Set buttons.			showOptionsBtn = advanced.showOptionsBtn;			showOptionsBtn2 = addmarker.showOptionsBtn;			showAdvanced = options.showAdvanced;			close = options.close;			closeAdv = advanced.close;			closeAddLoc = addmarker.close;			clearSO = advanced.clearSO;			closeConnect = connect.closeConnect;			openConnect = connect.openConnect;			homeLocation = advanced.homeLocation;			allLocations = options.allLocations;			removeLocation = options.removeLocation;			editLocation = options.editLocation;			addLocation = options.addLocation;			addLocation = options.addLocation;			saveLocations = advanced.saveLocations;			importLocations = advanced.importLocations;						// Set up "connect" items.			ButtonUtil.addListeners( addLocation, { down:onAddLocation } );			ButtonUtil.addListeners( showOptionsBtn, { down:onShowOptions } );			ButtonUtil.addListeners( showOptionsBtn2, { down:onShowOptions } );			ButtonUtil.addListeners( showAdvanced, { down:onShowAdvanced } );			ButtonUtil.addListeners( removeLocation, { down:onRemoveLocation } );			ButtonUtil.addListeners( editLocation, { down:onEditLocation } );			//ButtonUtil.addListeners( saveLocations, { down:onSaveLocations } );			ButtonUtil.addListeners( importLocations, { down:onImportLocations } );			ButtonUtil.addListeners( close, { down:onClose } );			ButtonUtil.addListeners( closeAdv, { down:onClose } );			ButtonUtil.addListeners( closeAddLoc, { down:onClose } );			ButtonUtil.addListeners( closeConnect, { down:onCloseConnect } );			ButtonUtil.addListeners( openConnect, { down:onOpenConnect } );			ButtonUtil.addListeners( clearSO, { down:onClearSO } );						removeChild( connect );			removeChild( advanced );			removeChild( addmarker );			//BedrockDispatcher.addEventListener( MapEvent.CLOSE_CONNECT, onCloseConnect );			// Views container, pass initial dialogue to view.			_container = new Container( options )			addChild( _container );					}						// Added for the Interface implementation.		public function initialize():IDisplay{return this};		public function refresh():IDisplay{return this};		public function start():IDisplay{return this};		public function intro():IDisplay{return this};		public function outro():IDisplay{return this};		public function clear():IDisplay{return this};		public function destroy():IDisplay{return this};						// Setup all dataproviders, etc.		public function setup($xml:XML):MapDialogueView		{						trace(this + " : setup()")			reset();						// Ghetto workaround to reference Flash components in Flex.			//var h:spark.components.ComboBox = homeLocation as spark.components.ComboBox;			//var r:spark.components.ComboBox = remoteLocation as spark.components.ComboBox;						var h:ComboBox = homeLocation as ComboBox;			//var r:ComboBox = remoteLocation as ComboBox;			var a:ComboBox = allLocations as ComboBox;						h.dataProvider.removeAll();			//r.dataProvider.removeAll();			a.dataProvider.removeAll();						// Set up XML.			_xml = $xml;			// Save data to Store.			MapStore.getInstance().update( _xml );			var loc:XMLList = ( _xml..location as XMLList );						// All combo boxes share same DataProvider.			//h.dataProvider = r.dataProvider = a.dataProvider = dataProvider = new DataProvider( _xml );			h.dataProvider = a.dataProvider = dataProvider = new DataProvider( _xml );						for(var i:int = 0; i < loc.length(); i++) 			{								if( loc[ i ].@isCurrent == "true" || loc[ i ].@isCurrent == true ) 				{										h.selectedIndex = i;									}							}						return this;					}						// Closes the connection request dialogue.		private function onShowAdvanced($e:MouseEvent):void		{						trace("onShowAdvanced()")						_container.changePanel( advanced );			advanced.timed( Settings.DIALOGUE_CLOSE_TIME );					}						// Closes the connection request dialogue.		private function onOpenConnect($e:MouseEvent):void		{						trace("onOpenConnect()")						if( connect.currentFrame == 1 ) connect.play();			connect.timed( Settings.DIALOGUE_CLOSE_TIME );					}						// Closes the connection request dialogue.		private function onCloseConnect($e:MouseEvent):void		{						trace(this + " : onCloseConnect");			TweenMax.delayedCall( 0.35, closeConnectDialogue );					} 				// Gets called when there is a request to connect to a location.		public function closeConnectDialogue():void		{						trace(this + " : closeConnectDialogue");			connect.stopTimer()			_container.changePanel();			connect.gotoAndStop( 1 );			BedrockDispatcher.dispatchEvent( new MapEvent( MapEvent.CONNECT_DIALOGUE_CLOSED, this, {} ) );					}						// 		private function onClose($e:MouseEvent):void		{						reset();						BedrockDispatcher.dispatchEvent( new MapEvent( MapEvent.CLOSE_WINDOW, this, {} ) );					}				// Gets called when there is a request to connect to a location.		public function ShowAddMarker():void		{						//trace(this + " : showConnect");			_container.changePanel( addmarker.timed( Settings.DIALOGUE_CLOSE_TIME ) );			// Called clear after it was added to the stage. Could not daisey chain it onto the addmarker object.			addmarker.clear();					}						// Gets called when there is a request to connect to a location.		public function ShowEditMarker($details:Object):void		{						//trace(this + " : showConnect");			_container.changePanel( addmarker.editContent( $details ).timed( Settings.DIALOGUE_CLOSE_TIME ) );					}				// Gets called when there is a request to connect to a location.		public function showConnect():void		{						//trace(this + " : showConnect");			_container.changePanel( connect.timed( Settings.DIALOGUE_CLOSE_TIME ) );					}				// Gets called when there is a request to connect to a location.		//private function onShowConnect($e:GenericEvent):void		public function showOptions():void		{						//trace(this + " : showOptions");			_container.changePanel( options.timed( Settings.DIALOGUE_CLOSE_TIME ) );					}						// Closes the connection request dialogue.		private function onShowOptions($e:MouseEvent):void		{						trace("onShowOptions()")			reset();			_container.changePanel( options.timed( Settings.DIALOGUE_CLOSE_TIME ) );					}						// 		private function onClearSO($e:MouseEvent):void		{						BedrockDispatcher.dispatchEvent( new MapEvent( MapEvent.CLEAR_SHARED_OBJECT, this, {} ) );					}						// 		private function onImportLocations($e:MouseEvent):void		{						//trace(this + " : onImportLocations()")			MapStore.getInstance().importLocations();					}				/*		// 		private function onSaveLocations($e:MouseEvent):void		{						MapStore.getInstance().update( _xml ).saveXmlCopyLocally();					}		*/				// 		private function onAddLocation($e:MouseEvent):void		{						trace(this + " : onAddLocation()")			BedrockDispatcher.dispatchEvent( new MapEvent( MapEvent.ADD_LOCATION, this, { x:200, y:200 } ) );					}						// 		private function onEditLocation($e:MouseEvent):void		{						trace(this + " : onEditLocation()");						//var l:spark.components.ComboBox = allLocations as spark.components.ComboBox;			var l:ComboBox = allLocations as ComboBox;			var selectedIndex:uint;			trace(l.selectedIndex)						// Make sure the ComboBox has a selection.			if( l.selectedIndex != -1 )			{								var newXMLList:XMLList = ( _xml..location as XMLList );				var toEditXMLList:XMLList = new XMLList( newXMLList[ l.selectedIndex ].copy() );				BedrockDispatcher.dispatchEvent( new MapEvent( MapEvent.EDIT_LOCATION, this, { index:l.selectedIndex, xml:XML( "<locations>" + newXMLList.toXMLString() + "</locations>" ) } ) );							}					}						// Removes selected location.		private function onRemoveLocation($e:MouseEvent):void		{						trace(this + " : onRemoveLocation()")			//var l:spark.components.ComboBox = allLocations as spark.components.ComboBox;			var l:ComboBox = allLocations as ComboBox;			var newXMLList:XMLList = new XMLList();			var newIndex:int = 0;			var selectedIndex:uint;						// Make sure the ComboBox has a selection.			if( l.selectedIndex != -1 )			{								var loc:XMLList = ( _xml..location as XMLList );				for(var i:uint = 0; i < loc.length(); i++)				{										if( i != l.selectedIndex ) 					{												newXMLList[ newIndex ] = loc[ i ].copy();						newIndex++;											}									}								BedrockDispatcher.dispatchEvent( new MapEvent( MapEvent.REMOVE_LOCATION, this, { xml:XML( "<locations>" + newXMLList.toXMLString() + "</locations>" ) } ) );							}								}						// Do setup for SharedObject.		private function onOptions($e:MouseEvent):void		{						_container.changePanel( options );					}						// Do setup for SharedObject.		private function onManageLocations($e:MouseEvent):void		{						_container.changePanel( manage );					}						// Should reset whichever item needs it.		public function reset():MapDialogueView		{						addmarker.clear();			homeLocation.close();			allLocations.close();			return this;					}			}	}