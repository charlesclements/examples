package com.imt.mch.TeleMedicineCommandCenter.view.map.interactive{	import com.bedrock.framework.core.dispatcher.BedrockDispatcher;	import com.bedrock.framework.plugin.util.ButtonUtil;	import com.greensock.TweenMax;	import com.imt.framework.core.event.SiteEvent;	import com.imt.mch.TeleMedicineCommandCenter.event.MapEvent;	import com.imt.mch.TeleMedicineCommandCenter.model.MapStore;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.geom.Point;		import settings.Settings;		public class MapHotspotsView extends Sprite	{				public var spot0:MovieClip;		public var spot1:MovieClip;		public var spot2:MovieClip;		public var spot3:MovieClip;		public var spot4:MovieClip;		public var spot5:MovieClip;		public var spot6:MovieClip;		public var spot7:MovieClip;				public var hotspots:Array						// Constructor.		public function MapHotspotsView()		{			super();			trace(this)					}						// Init		public function initialize():MapHotspotsView		{						trace(this + " : initialize()")						// Reference movieclips.			hotspots = [ spot0, spot1, spot2, spot3, spot4, spot5, spot6, spot7 ];			MapStore.getInstance().setHotspots( hotspots );						// Add functionality to all hotspots.			if( Settings.IS_INTERACTIVE ){ for( var i:uint = 0; i < hotspots.length; i++ ) ButtonUtil.addListeners( getChildAt( i ), { down:onDown, up:onUp }, false ) };			stage.addEventListener( MouseEvent.MOUSE_DOWN, onStageDown );			return this;					}						// Called when you click on the Map.		private function onStageDown(e:MouseEvent):void		{						var length:uint = hotspots.length;			for( var i:uint = 0; i < length; i++ )			{								var c:MovieClip = ( hotspots[ i ] as MovieClip );								if( c.hitTestPoint( mouseX, mouseY ) )				{										BedrockDispatcher.dispatchEvent( new MapEvent( MapEvent.HOTSPOT_LOCATION_UPDATE, this, { point:new Point( c.x, c.y ) } ) );					break;									}							}					}						// Called when you click on the Map.		private function onDown(e:MouseEvent):void		{						var c:MovieClip = ( e.currentTarget as MovieClip );			//TweenMax.to( this, 0, { delay:2, onComplete:adjust, onCompleteParams:[ c ] } );			adjust( c );		}						private function adjust(c:MovieClip):void		{						//			//onUp			// Save data in a model that can be accessed elsewhere.			MapStore.getInstance().lastClickX = mouseX;			MapStore.getInstance().lastClickY = mouseY;						// Shows the dialogue.			BedrockDispatcher.dispatchEvent( new MapEvent( MapEvent.SHOW_OPTIONS, this, { points:{ markerX:mouseX, markerY:mouseY, dialogueX:c.x, dialogueY:c.y } } ) );					}				// Creates everything in the Marker after delay.		private function onUp($e:MouseEvent):void		{						//trace(this+ " : onUp");			TweenMax.killTweensOf( this );		}			}	}