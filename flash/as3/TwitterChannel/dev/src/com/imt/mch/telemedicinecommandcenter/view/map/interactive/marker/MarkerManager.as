package com.imt.mch.TeleMedicineCommandCenter.view.map.interactive.marker{	import com.bedrock.framework.core.dispatcher.BedrockDispatcher;	import com.bedrock.framework.core.event.GenericEvent;	import com.greensock.TweenMax;	import com.imt.mch.TeleMedicineCommandCenter.event.MapEvent;	import com.imt.mch.TeleMedicineCommandCenter.model.MapStore;	import com.imt.mch.TeleMedicineCommandCenter.view.map.interactive.dialogue.MapDialogueView;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.net.URLLoader;	import flash.net.URLRequest;	public class MarkerManager extends Sprite	{						// Variables.		private var _markers:Sprite;		private var _url:String;		private var _xml:XML;		private var _loader:URLLoader;		//private var _update:uint;						// Constructor.		public function MarkerManager($data:Object=null)		{						super();						trace(this);						// Register events.			BedrockDispatcher.addEventListener( MapEvent.LOCATION_ADDED, onAddLocation );			BedrockDispatcher.addEventListener( MapEvent.REMOVE_LOCATION, onRemoveLocation );			BedrockDispatcher.addEventListener( MapEvent.XML_READY, onXmlReady );			//BedrockDispatcher.addEventListener( MapEvent.MARKER_UPDATED, onUpdateMarkers );			BedrockDispatcher.addEventListener( MapEvent.MARKER_REFRESH, onRefreshMarkers );			//BedrockDispatcher.addEventListener( MapEvent.SHOW_LOCATION, onShowLocation );						// Add container for Markers.			_markers = new Sprite;			addChild( _markers );					}						// XML has loaded.		private function onXmlReady($e:GenericEvent):void		{						//trace(this + " : onXmlReady")			_xml = XML( $e.details.xml );			applyMarkers();					}						// Applies markers to the stage.		private function onRefreshMarkers($e:GenericEvent):void		{						//trace(this + " : onRefreshMarkers");						_xml = XML( $e.details.xml );			var locs:XMLList = _xml..location as XMLList;						// Refresh the Markers.			for(var i:uint = 0; i < locs.length(); i++)			{								//trace(i);								// Compare labels.				var m:MarkerView = ( _markers.getChildAt( i ) as MarkerView )				if( locs[ 0 ].label == m.xmlList[ 0 ].label  )				{										//trace(this + " : Match!");					m.refresh( XMLList( locs[ i ] ) );					break;									}				//else trace(this + " : No match");							}					}						// Applies markers to the stage.		private function applyMarkers():void		{						trace(this + " : applyMarkers")						// Remove Markers before applying new ones.			removeMarkers();						// Add the new Markers.			for(var i:uint = 0; i < _xml..location.length(); i++)			{								var m:MarkerView = ( new Marker as MarkerView ).setup( _xml..location[ i ], i, ( i * 0.5 ) + 1 );				_markers.addChild( m );							}					}				// Applies markers to the stage.		private function removeMarkers():void		{						trace(this + " : removeMarkers");						var l:uint = _markers.numChildren;			for(var i:uint = 0; i < l; i++)			{								var m:MarkerView = ( _markers.removeChildAt( 0 ) as MarkerView ).clear();				m = null;							}					}				// Gets called when there is a request to connect to a location.		private function onShowLocation($e:GenericEvent):void		{						trace(this + " : onShowConnect");			//closeMarkers( $e.details.marker as MarkerView );					}						// Applies markers to the stage.		private function closeMarkers($exception:MarkerView):MarkerManager		{						trace(this + " : closeMarkers");			var l:int = _markers.numChildren;						for(var i:uint = 0; i < l; i++)			{								var m:MarkerView = ( _markers.getChildAt( i ) as MarkerView )				if( m != $exception ) m.close();							}						return this;					}						// XML has loaded.		private function onAddLocation(e:Event):void		{						trace(this + " : onAddLocation")					}						// XML has loaded.		private function onRemoveLocation(e:Event):void		{						trace(this + " : onRemoveLocation")					}			}	}