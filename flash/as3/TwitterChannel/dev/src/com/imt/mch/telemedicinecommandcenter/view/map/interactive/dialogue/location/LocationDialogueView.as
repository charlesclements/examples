package com.imt.mch.TeleMedicineCommandCenter.view.map.interactive.dialogue.location{		import com.bedrock.framework.core.dispatcher.BedrockDispatcher;	import com.bedrock.framework.core.event.GenericEvent;	import com.bedrock.framework.plugin.util.ButtonUtil;	import com.demonsters.debugger.MonsterDebugger;	import com.greensock.BlitMask;	import com.greensock.TimelineMax;	import com.greensock.TweenAlign;	import com.greensock.TweenMax;	import com.greensock.easing.Power3;	import com.greensock.easing.Power4;	import com.imt.framework.core.event.SiteEvent;	import com.imt.framework.display.Container;	import com.imt.framework.display.IDisplay;	import com.imt.framework.engine.data.SiteData;	import com.imt.framework.plugin.slideshow.Slideshow;	import com.imt.mch.TeleMedicineCommandCenter.data.AppData;	import com.imt.mch.TeleMedicineCommandCenter.event.MapEvent;	import com.imt.mch.TeleMedicineCommandCenter.model.MapStore;	import com.imt.mch.TeleMedicineCommandCenter.view.map.interactive.dialogue.location.MediaHandlerView;	import com.imt.mch.TeleMedicineCommandCenter.view.map.interactive.dialogue.nav.TopNavView;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.events.MouseEvent;	import flash.net.FileReference;	import flash.net.SharedObject;	import flash.text.TextField;	import flash.text.TextFieldType;	import flash.text.TextFormat;	import flash.utils.ByteArray;		import fl.controls.Button;	import fl.controls.CheckBox;	import fl.controls.ComboBox;	import fl.data.DataProvider;		import settings.Settings;
			public class LocationDialogueView extends Sprite implements IDisplay	{						// Variables.		public var nav:TopNavView;		public var locationInfo:LocationInfoView;		public var locationTxt:TextField;		public var mediaHandler:MediaHandlerView;		private var _resizeTween:TweenMax;		private var _txtfmtRegular:TextFormat;		private var _txtfmtEdit:TextFormat;		private var _list:XMLList;		private var editingTimeline:TimelineMax		// Constructor.		public function LocationDialogueView()		{						trace(this);					}						// Unused / Added for the Interface implementation.		public function intro():IDisplay{return this};		public function outro():IDisplay{return this};		public function destroy():IDisplay{return this};						// 		public function initialize():IDisplay		{						trace(this + " : initialize");			// Initialize navigation.			nav.initialize();			locationInfo.initialize();			// Media stuff.			if ( contains( mediaHandler ) ) removeChild( mediaHandler );			mediaHandler.initialize();			return this					}				// This is called at a defined time after the resize has finished.		private function _postResize():void		{						//trace(this + " : _postResize");			addChild( mediaHandler );			addChild(locationInfo);					}						// Handle the resizing event.		private function resizing($e:Event):void		{						//trace(this + " : resizing");			if( contains( mediaHandler ) )			{								removeChild( mediaHandler );				_resizeTween = new TweenMax( {}, Settings.ANIMATION_TIME, { onComplete:_postResize } );							}					}						public function refresh():IDisplay		{						trace(this + " : refresh");			stage.addEventListener( Event.RESIZE, resizing );			x = AppData.DIALOGUE_X;			y = AppData.DIALOGUE_Y;			scaleX = scaleY = AppData.DIALOGUE_SCALE;			BedrockDispatcher.addEventListener( MapEvent.EDIT, onEvent );			BedrockDispatcher.addEventListener( MapEvent.CANCEL, onEvent );			BedrockDispatcher.addEventListener( MapEvent.SAVE, onEvent );			nav.refresh();			locationInfo.refresh();			mediaHandler.refresh();			return this;				}						public function start():IDisplay		{						addChild( mediaHandler );			mediaHandler.start();			locationInfo.start();			// Do editing tween anime.			var t:Number = Settings.ANIMATION_TIME;			var s:Number = ( 200 / mediaHandler.slideshow.thumbnailsContainer.height );			var arr:Array = [ locationInfo.editAnime(), mediaHandler.editAnime() ];			addChild(locationInfo);						editingTimeline = new TimelineMax;			editingTimeline.appendMultiple( arr, -0.5 );			editingTimeline.pause();			return this				}						public function clear():IDisplay		{						trace(this + " : clear");			nav.clear();			locationInfo.clear();			stage.removeEventListener( Event.RESIZE, resizing );			BedrockDispatcher.removeEventListener( MapEvent.EDIT, onEvent );			BedrockDispatcher.removeEventListener( MapEvent.CANCEL, onEvent );			BedrockDispatcher.removeEventListener( MapEvent.SAVE, onEvent );			editingTimeline.gotoAndStop( 0 );			if ( contains( mediaHandler ) ) removeChild( mediaHandler );			return this				}						// Called to start editing items.		private function _doEditing($edit:Boolean):void		{									MonsterDebugger.trace( this, "_doEditing : " + $edit );						if( $edit )			{								editingTimeline.gotoAndPlay( 0 );							}			else			{								editingTimeline.reverse();							}						locationInfo.edit( $edit );							}						// Handles all major events.		private function onEvent($e:Event):void		{						trace(this + " : onEvent : " + $e.type)			switch( $e.type )			{								case MapEvent.EDIT:					_doEditing( true );					break;								case MapEvent.SAVE:					_doEditing( false );					break;								case MapEvent.CANCEL:					var tempLabel:String = AppData.SELECTED_XMLLIST.label;					var tempLabel2:String = AppData.SELECTED_XMLLIST.content.textline[0];					_doEditing( false );					_list = AppData.SELECTED_XMLLIST as XMLList;					_list.label=tempLabel;					_list.content.textline[0] = tempLabel2;							trace (tempLabel2);										locationInfo.txt1.text = tempLabel;					locationInfo.input1.text = tempLabel;					locationInfo.txt2.text = tempLabel2;					locationInfo.input2.text = tempLabel2;					locationInfo.input1.visible = false;					locationInfo.input2.visible = false;					locationInfo.txt1.visible = true;					locationInfo.txt2.visible = true;					locationInfo.suggestion0.visible=false;					locationInfo.suggestion1.visible=false;					locationInfo.suggestion2.visible=false;					locationInfo.suggestion3.visible=false;					locationInfo.suggestion4.visible=false;					break;							}					}			}	}