package com.imt.framework.display.button{		import com.bedrock.framework.core.dispatcher.BedrockDispatcher;	import com.imt.framework.core.event.GenericEvent;	import com.bedrock.framework.plugin.util.ButtonUtil;	import com.imt.framework.display.IDisplay;	import com.imt.framework.core.event.SiteEvent;		import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.text.TextField;

	//import com.imt.hollywood_squares.data.GameData;		public class AnimatedLightsButton extends AbstractGameButton implements IDisplay	{				public var hotspot:MovieClip;		public var square:MovieClip;		//public var txt:TextField;		private var _answer:String;						public function AnimatedLightsButton()		{						super();			square.gotoAndStop( "YELLOW" );			square.inner.gotoAndStop( 1 );						addEventListener( SiteEvent.TIMER_COMPLETE, onEvent );			BedrockDispatcher.addEventListener( SiteEvent.CHANGE, onEvent );			BedrockDispatcher.addEventListener( SiteEvent.READY, onEvent );			BedrockDispatcher.addEventListener( SiteEvent.DISABLE_BUTTONS, onEvent );			hotspot.alpha = 0;//.05;			ButtonUtil.addListeners( hotspot, { down:onDown } );					}						// Mouse event.		private function onDown($e:MouseEvent):void		{						BedrockDispatcher.addEventListener( SiteEvent.DISABLE_BUTTONS, onEvent );			hotspot.visible = false;			//square.visible = true;			square.play();			square.inner.stop();			// Show win/lose anime here.			//square.play();						// Creates a delay before calling the prize dialogue.			startTimer();						//square.gotoAndStop( "BLACK" );					}						// Refresh class properties.		public function refresh():IDisplay		{						//trace(this + " : update" );			square.gotoAndStop( "YELLOW" );			square.inner.play();			hotspot.visible = true;			return this;					}						// Clear class properties.		public function clear():IDisplay		{			trace(this + " : clear()" );			square.inner.stop();			return this;					}						// Handle all events.		private function onEvent($e:GenericEvent):void		{						switch($e.type) 			{								case SiteEvent.TIMER_COMPLETE:					trace(this + " :  " + $e.type );					square.gotoAndStop( "BLACK" );					square.inner.stop();					dispatchEvent( new SiteEvent( SiteEvent.SELECTION, this ) );					break;								case SiteEvent.DISABLE_BUTTONS:					hotspot.visible = false;					break;								case SiteEvent.CHANGE:					hotspot.visible = false;					break;								case SiteEvent.READY:					hotspot.visible = true;					break;							}					}			}	}