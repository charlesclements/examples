package com.imt.objects{		import com.bedrock.extras.util.MathUtil;	import com.bedrock.framework.plugin.util.ArrayUtil;	import com.demonsters.debugger.MonsterDebugger;	import com.greensock.TweenMax;	import com.greensock.easing.Power3;	import com.imt.assets.Assets;	import com.imt.framework.display.AbstractStarlingDisplay;	import com.imt.framework.display.IDisplay;	import com.imt.framework.engine.data.GameData;	import com.imt.game.background.Layer;	import com.imt.game.components.Sun;		import starling.display.Image;	import starling.display.Sprite;	import starling.events.Event;	import starling.textures.Texture;

	//import com.imt.framework.display.background.Layer;
		public class Background extends AbstractStarlingDisplay implements IDisplay	{				//private var bg:Image;		private var bgLayer1:Image;						/*		private var bgLayer2:Layer;		private var bgLayer3:Layer;		private var bgLayer4:Layer;		private var greenery:Layer;		private var buildings:Layer;		private var bgSun:IDisplay;		// Clouds.		private var currentCloud1:Layer;		private var currentCloud2:Layer;		private var cloud1:Layer;		private var cloud2:Layer;		private var cloud3:Layer;		private var cloud4:Layer;		private var cloud5:Layer;		private var cloud6:Layer;		private var clouds:Array;		private var cloudsHolder:Sprite;		private var _speed:Number = 0;		static public var LAYER_TYPE_CLOUD:String = "Background.LAYER_TYPE_CLOUD";		*/				public function Background()		{						super();			//addEventListener( starling.events.Event.ADDED_TO_STAGE, onEvent);					}				public function initialize($data:Object=null):void		{						if( !initialized ) 			{									trace(this + " : initialize");				//bgLayer1 = new Layer( Graphics.getTexture( "bgSky" ) );				//bgLayer1 = new Layer( Assets.getTextureAtlas( "Stage1_0" ).getTexture( "sky-w1024" ), "sky-w1024" );				bgLayer1 = new Image( Texture.fromColor( Assets.WIDTH, Assets.HEIGHT, 0xcccccc ) );								addChild( bgLayer1 );								//				initialized = true;							}					}								public function createLayer($data:Object):void		{						trace(this + " : createLayer : ");																				}						public function refresh():void		{						trace(this + " : refresh");			if( !initialized ) initialize();			//addEventListener( Event.ENTER_FRAME, onEvent );					}						public function clear():void		{			trace(this + " : clear");			//removeEventListener( Event.ENTER_FRAME, onEvent );		}						public function start():void		{		}						public function intro():void		{						trace(this + " : intro");			//TweenMax.to( this, 2, { speed:10, ease:Power3.easeOut } );			refresh();					}						public function outro():void		{						//TweenMax.to( this, 8, { speed:0, ease:Power3.easeOut, onComplete:clear } );			clear();					}						public function cancel():void{};		public function destroy():void{};						// Handle all the events.		private function onEvent(event:Event):void		{						//trace(this + " : onEvent " + event.type);						switch( event.type )			{								case Event.ENTER_FRAME:					/*					doParallax( bgLayer1 );					//doParallax( bgLayer2 );					doParallax( bgLayer3 );					doParallax( greenery );					doParallax( buildings );					doCloudParallax( currentCloud1 );					doCloudParallax( currentCloud2 );					*/					break;								case starling.events.Event.ADDED_TO_STAGE:					trace(this + " : " + event.type);					//initialize();					break;								default:					trace(this + " : Unhandled event - " + event.type);								}					}						public function get speed():Number		{			return 0;//_speed;		}						public function set speed(value:Number):void		{			//_speed = value;		}				/*		// Simplify the movement function the speed.		private function doParallax($layer:Layer):void		{						//trace( this + " : doParallax : " + $layer );			var X:Number = $layer.x;			X -= Math.ceil(_speed * $layer.parallax);			if (X < -1 * ( $layer.width / 3 ) ) X = -1;			$layer.x = X;					}				// Simplify the movement function the speed.		private function doCloudParallax($cloud:Layer):void		{						//trace( this + " : doCloudParallax" );			if( $cloud.isMobile )			{								var X:Number = $cloud.x;				X -= Math.ceil( _speed * $cloud.parallax );				$cloud.x = X;				if (X < -GameData.STAGE_WIDTH - $cloud.width + 200 )				{										$cloud.isMobile = false;					_getDifferentCloud( $cloud );									}							}					}		*/					}	}