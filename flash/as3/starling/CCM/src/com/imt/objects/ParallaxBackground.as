package com.imt.objects{		import com.bedrock.extras.util.MathUtil;	import com.bedrock.framework.plugin.util.ArrayUtil;	import com.demonsters.debugger.MonsterDebugger;	import com.greensock.TweenMax;	import com.greensock.easing.Power3;	import com.imt.assets.Assets;	import com.imt.framework.display.AbstractStarlingDisplay;	import com.imt.framework.display.IDisplay;	import com.imt.framework.engine.data.GameData;	import com.imt.game.background.Layer;	import com.imt.game.components.Sun;		import starling.display.Sprite;	import starling.events.Event;

	//import com.imt.framework.display.background.Layer;
		public class ParallaxBackground extends AbstractStarlingDisplay implements IDisplay	{				//private var bg:Image;		private var bgLayer1:Layer;		private var bgLayer2:Layer;		private var bgLayer3:Layer;		private var bgLayer4:Layer;		private var greenery:Layer;		private var buildings:Layer;		private var bgSun:IDisplay;		// Clouds.		private var currentCloud1:Layer;		private var currentCloud2:Layer;		private var cloud1:Layer;		private var cloud2:Layer;		private var cloud3:Layer;		private var cloud4:Layer;		private var cloud5:Layer;		private var cloud6:Layer;		private var clouds:Array;		private var cloudsHolder:Sprite;		private var _speed:Number = 0;		static public var LAYER_TYPE_CLOUD:String = "ParallaxBackground.LAYER_TYPE_CLOUD";						public function ParallaxBackground()		{						super();			//addEventListener( starling.events.Event.ADDED_TO_STAGE, onEvent);					}				public function initialize($data:Object=null):void		{						if( !initialized ) 			{									trace(this + " : initialize");				//bgLayer1 = new Layer( Graphics.getTexture( "bgSky" ) );				bgLayer1 = new Layer( Assets.getTextureAtlas( "Stage1_0" ).getTexture( "sky-w1024" ), "sky-w1024" );				bgLayer1.parallax = 0;//0.02;				addChild( bgLayer1 );				// Clouds.				cloudsHolder = new Sprite;				addChild( cloudsHolder as Sprite );				clouds = [];																				//trace( Assets.getTextureAtlas( "Stage1_1" ) );								trace("-")				//cloud1 = new Layer( Graphics.getTexture( "bgCloud1" ) );				cloud1 = new Layer( Assets.getTextureAtlas( "Stage1_1" ).getTexture( "cloud1" ), "cloud1" );				//cloud1 = new Layer( Assets.getTexture( "cloud1.png" ) );				cloud1.parallax = 0.02;				trace("-")				clouds.push( cloud1 );				//cloud2 = new Layer( Graphics.getTexture( "bgCloud2" ) );				//cloud2 = new Layer( Assets.getTexture( "cloud2.png" ) );				cloud2 = new Layer( Assets.getTextureAtlas( "Stage1_0" ).getTexture( "cloud2" ), "cloud2" );				cloud2.parallax = 0.02;				clouds.push( cloud2 );				trace("-")				//cloud3 = new Layer( Graphics.getTexture( "bgCloud3" ) );				//cloud3 = new Layer( Assets.getTexture( "cloud3.png" ) );				cloud3 = new Layer( Assets.getTextureAtlas( "Stage1_0" ).getTexture( "cloud3" ), "cloud3" );				cloud3.parallax = 0.02;				clouds.push( cloud3 );				trace("-")				//cloud4 = new Layer( Graphics.getTexture( "bgCloud4" ) );				//cloud4 = new Layer( Assets.getTexture( "cloud4.png" ) );				cloud4 = new Layer( Assets.getTextureAtlas( "Stage1_0" ).getTexture( "cloud4" ), "cloud4" );				cloud4.parallax = 0.02;				clouds.push( cloud4 );				trace("-")				//cloud5 = new Layer( Graphics.getTexture( "bgCloud5" ) );				//cloud5 = new Layer( Assets.getTexture( "cloud5.png" ) );				cloud5 = new Layer( Assets.getTextureAtlas( "Stage1_1" ).getTexture( "cloud5" ), "cloud5" );				cloud5.parallax = 0.02;				clouds.push( cloud5 );				//cloud6 = new Layer( Graphics.getTexture( "bgCloud6" ) );				//cloud6 = new Layer( Assets.getTexture( "cloud6.png" ) );				cloud6 = new Layer( Assets.getTextureAtlas( "Stage1_0" ).getTexture( "cloud6" ), "cloud6" );				cloud6.parallax = 0.02;				clouds.push( cloud6 );				createClouds();				// Sun.				bgSun = new Sun;				( bgSun as Sprite ).x = GameData.STAGE_WIDTH + 20;				( bgSun as Sprite ).y = -20;				addChild( bgSun as Sun );				// Greenery.				//greenery = new Layer( Graphics.getTexture( "bgGreenery" ) );				//greenery = new Layer( Assets.getTexture( "greenery.png" ) );				greenery = new Layer( Assets.getTextureAtlas( "Stage1_0" ).getTexture( "greenery" ), "greenery" );				greenery.parallax = 0.13;				greenery.y = 292;				addChild( greenery );								/*				bgLayer2 = new Layer( Graphics.getTexture( "bgMid" ) );				bgLayer2.y = bgLayer1.height;				bgLayer2.parallax = 0.2;				addChild( bgLayer2 );				*/								//bgLayer3 = new Layer( Graphics.getTexture( "bgRunway" ) );				//bgLayer3 = new Layer( Assets.getTexture( "runway-w1024.png" ) );				bgLayer3 = new Layer( Assets.getTextureAtlas( "Stage1_0" ).getTexture( "runway-w1024" ), "runway-w1024" );				bgLayer3.parallax = 0.6;				//bgLayer3.y = bgLayer1.height + bgLayer2.height;				bgLayer3.y = 500;//740 - bgLayer3.height;				addChild( bgLayer3 );				// Buildings.				//buildings = new Layer( Graphics.getTexture( "bgBuildings" ) );				//buildings = new Layer( Assets.getTexture( "buildings.png" ) );				buildings = new Layer( Assets.getTextureAtlas( "Stage1_0" ).getTexture( "buildings" ), "buildings" );				buildings.parallax = 0.3;				buildings.y = 360;				addChild( buildings );				//				initialized = true;							}					}								public function createLayer($data:Object):void		{						trace(this + " : createLayer : ");																				}														public function refresh():void		{						trace(this + " : refresh");			if( !initialized ) initialize();			addEventListener( Event.ENTER_FRAME, onEvent );			bgSun.refresh();			//trace(this + " : refresh - END");					}						public function clear():void		{			trace(this + " : clear");			removeEventListener( Event.ENTER_FRAME, onEvent );			bgSun.clear();			trace(this + " : clear END");		}						public function start():void		{		}						public function intro():void		{						trace(this + " : intro");			TweenMax.to( this, 2, { speed:10, ease:Power3.easeOut } );			refresh();					}						public function outro():void		{						//TweenMax.to( plane, 3, { x:-300, overwrite:5, ease:Power3.easeInOut, onComplete:clear } );			TweenMax.to( this, 8, { speed:0, ease:Power3.easeOut, onComplete:clear } );//					}						public function cancel():void{};		public function destroy():void{};								private function createClouds():void		{						trace(this + " : createClouds");			var c:Layer;			cloudsHolder.removeChildren();			ArrayUtil.shuffle( clouds );									trace(clouds);									var l:uint = clouds.length;			for( var i:uint = 0; i < l; i++ )			{								c = clouds[ i ] as Layer;				c.parallax = MathUtil.randomRange( 0.018, 0.2, true );				switch( i )				{										case 0:						_getDifferentCloud( c );						break;										case 1:						_getDifferentCloud( c );						break;										default:return;										}							}					}								private function _getDifferentCloud($cloud:Layer):void		{						trace(this + " : _getDifferentCloud : " + $cloud);									//MonsterDebugger.trace( this, clouds, "_getDifferentCloud" );												ArrayUtil.shuffle( clouds );			var c:Layer = ArrayUtil.getRandomItems( clouds, 1 )[ 0 ] as Layer;						// If null.			if( currentCloud1 == null ) currentCloud1 = c, _getDifferentCloud( $cloud );			if( currentCloud2 == null ) currentCloud2 = c, _getDifferentCloud( $cloud );									if( cloudsHolder.contains( $cloud ) ) cloudsHolder.removeChild( $cloud );												if( c != currentCloud1 && c != currentCloud2 )			{								trace("No match to the current clouds.");				switch( $cloud )				{										case currentCloud1:						currentCloud1 = c;						break;										case currentCloud2:						currentCloud2 = c;						break;										default:						if( currentCloud1 == null ) currentCloud1 = c;						else currentCloud2 = c;						break;														}				c.isMobile = true;				c.x = MathUtil.randomRange( 200, 400 );				c.y = MathUtil.randomRange( 50, 200 );				c.parallax = MathUtil.randomRange( 0.02, 0.04, true );				c.scaleX = c.scaleY = 1 - ( c.scaleY * c.parallax );				TweenMax.fromTo( c, 1, { alpha:0 }, { alpha:1 } );				cloudsHolder.addChild( c );							}			else 			{								trace("Matched old cloud, get different cloud.");				_getDifferentCloud( $cloud );							}					}								// Handle all the events.		private function onEvent(event:Event):void		{						//trace(this + " : onEvent " + event.type);						switch( event.type )			{								case Event.ENTER_FRAME:					doParallax( bgLayer1 );					//doParallax( bgLayer2 );					doParallax( bgLayer3 );					doParallax( greenery );					doParallax( buildings );					doCloudParallax( currentCloud1 );					doCloudParallax( currentCloud2 );					break;								case starling.events.Event.ADDED_TO_STAGE:					trace(this + " : " + event.type);					//initialize();					break;								default:					trace(this + " : Unhandled event - " + event.type);								}					}						public function get speed():Number		{			return _speed;		}						public function set speed(value:Number):void		{			_speed = value;		}						// Simplify the movement function the speed.		private function doParallax($layer:Layer):void		{						//trace( this + " : doParallax : " + $layer );			var X:Number = $layer.x;			X -= Math.ceil(_speed * $layer.parallax);			if (X < -1 * ( $layer.width / 3 ) ) X = -1;			$layer.x = X;					}						// Simplify the movement function the speed.		private function doCloudParallax($cloud:Layer):void		{						//trace( this + " : doCloudParallax" );			if( $cloud.isMobile )			{								var X:Number = $cloud.x;				X -= Math.ceil( _speed * $cloud.parallax );				$cloud.x = X;				if (X < -GameData.STAGE_WIDTH - $cloud.width + 200 )				{										$cloud.isMobile = false;					_getDifferentCloud( $cloud );									}							}					}					}	}