package hype.extended.color {	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.InteractiveObject;	import flash.display.Sprite;	import flash.geom.ColorTransform;		import hype.framework.color.IColorist;	/**	 * Colorist that applies colors from a linked image	 */	public class PixelColorist implements IColorist {		protected var _imageBitmapData:BitmapData;		protected var _width:Number;		protected var _height:Number;				/**		 * Constructor		 * 		 * @param image Class name of Linked image in library (Class)		 * @param width Width of Linked image in library (Number)		 * @param height Height of Linked image in library (Number)		 */		public function PixelColorist(image:*, width:Number, height:Number) {			_width = width;			_height = height;						if (image is Class) {				_imageBitmapData = new image(_width, _height);			} else if (image is BitmapData) {				_imageBitmapData = image;			}		}		/**		 * Color all InteractiveObject children of a sprite with the color that corresponds to the position of the sprite over the image		 * 		 * @param sprite Sprite that should have it's children colored		 */		public function colorChildren(sprite:Sprite):void {			var max:uint = sprite.numChildren;			var i:uint;			var child:DisplayObject;			var rgb:uint;						for (i=0; i<max; ++i) {				child = sprite.getChildAt(i);				if (child is InteractiveObject) {					rgb = _imageBitmapData.getPixel((sprite.x + child.x), (sprite.y + child.y));					child.transform.colorTransform = new ColorTransform(0, 0, 0, 1, rgb >> 16, rgb >> 8 & 255, rgb & 255, 0);				}			}		}				public function getColorAt(curX:Number, curY:Number):uint {			var x:uint = curX;			var y:uint = curY;						return _imageBitmapData.getPixel(x, y);		}		/**		 * Randomly choose a color from the image		 * 		 * @return integer color value		 */		public function getColor():uint {			var x:uint = Math.floor(Math.random() * _width);			var y:uint = Math.floor(Math.random() * _height);						return _imageBitmapData.getPixel(x, y);		}	}}