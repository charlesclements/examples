package com.imt.framework.display.dialogue{	import com.bedrock.framework.core.dispatcher.BedrockDispatcher;	import com.bedrock.framework.plugin.util.ButtonUtil;	import com.imt.framework.engine.data.GameData;	import com.imt.framework.data.GameData;	import com.imt.framework.engine.data.SiteData;	import com.imt.framework.display.IDisplay;	import com.imt.framework.display.button.AnimatedLightsButton;	import com.imt.framework.core.event.SiteEvent;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;		public class WammyDialogueView extends AbstractDialogue implements IDisplay	{				public var btnNextPlayer:AnimatedLightsButton;		public var btnEndGame:AnimatedLightsButton;		public var txtType:TextField;		public var txtValue:TextField;						public function WammyDialogueView()		{						super();					}						public function initialize():void		{						trace(this + " : initialize" );					}				// Refresh class properties.		public function refresh():IDisplay		{						trace(this + " : refresh()" );			btnNextPlayer.refresh();			btnNextPlayer.addEventListener( SiteEvent.SELECTION, onEvent );			btnEndGame.refresh();			btnEndGame.addEventListener( SiteEvent.SELECTION, onEvent );			// Checks to see if the NEXT button needs to be hidden.									GameData.									btnNextPlayer.visible = ( GameData.PLAYER_INDEX < GameData.//..player.length() - 1 ) ? true : false;			//btnNextPlayer.visible = ( GameData.PLAYER_INDEX < GameData.GAME_XML..player.length() - 1 ) ? true : false;			//trace(GameData.PLAYER_INDEX)			//trace(GameData.GAME_XML..game.( @id == GameData.CODE ).player.length() - 1)			return this;					}						// Refresh class properties.		public function clear():IDisplay		{			trace(this + " : clear()" );						//BedrockDispatcher.removeEventListener( SiteEvent.SELECTION, onEvent );			return this;					}						private function onEvent(e:Event):void		{			//trace(this + " : " + e.type )						switch( e.type )			{				case SiteEvent.SELECTION:										switch( e.currentTarget )					{												case btnEndGame:							close();							//BedrockDispatcher.dispatchEvent( new SiteEvent( SiteEvent.RESET, this, {} ));							BedrockDispatcher.dispatchEvent( new SiteEvent( SiteEvent.NEXT_GAME, this, {} ));							break;												case btnNextPlayer:							close();							BedrockDispatcher.dispatchEvent( new SiteEvent( SiteEvent.NEXT_GAME, this, {} ));							break;											}										break;							}					}			}	}