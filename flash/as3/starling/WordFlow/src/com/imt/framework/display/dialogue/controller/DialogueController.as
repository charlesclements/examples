package com.imt.framework.display.dialogue.controller{	
		//import com.imt.framework.event;	import com.imt.framework.core.dispatcher.Dispatcher;	import com.imt.framework.core.dispatcher.StarlingDispatcher;	import com.imt.framework.core.event.SiteEvent;	import com.imt.framework.display.FlashDisplayer;	import com.imt.framework.display.IDisplay;	import com.imt.framework.display.StarlingDisplayer;	import com.imt.framework.display.dialogue.view.GenericDialogueView;	import com.imt.framework.engine.data.GameData;	import com.imt.framework.engine.data.SiteData;	import com.imt.framework.event.StarlingSiteEvent;	import flash.events.Event;	import starling.events.Event;
	
		public class DialogueController extends FlashDisplayer	{				private var _xml:XML;						/*		public var _endDialoqueView:IDisplay;		public var _gameOverDialogueView:IDisplay;		public var _prizeDialogueView:IDisplay;		public var _confirmDialogueView:IDisplay;		public var _wammyDialogueView:IDisplay;		*/				private var playDialogue:IDisplay;						/*		public var _endDialoqueView:EndDialogueView;		public var _gameOverDialogueView:GameOverDialogueView;		public var _prizeDialogueView:PrizesDialogueView;		public var _confirmDialogueView:ConfirmDialogueView;		public var _wammyDialogueView:WammyDialogueView;		*/		// Constructor.		public function DialogueController()		{						trace(this);			super();					}						// Initializes class.		public function initialize():DialogueController		{						trace(this + " : initialize");			/*			// Dialogues			_gameOverDialogueView = new GameOverDialogue;			_gameOverDialogueView.initialize();						_confirmDialogueView = new ConfirmDialogue;			_confirmDialogueView.initialize();						_prizeDialogueView = new PrizesDialogue;			_prizeDialogueView.initialize();						_wammyDialogueView = new WammyDialogue;			_wammyDialogueView.initialize();						_endDialoqueView = new EndDialogue;			_endDialoqueView.initialize();			*/			// Event stuff.			Dispatcher.addEventListener( SiteEvent.RESET, onEvent ); 			Dispatcher.addEventListener( SiteEvent.END, onEvent ); 			Dispatcher.addEventListener( SiteEvent.DONE, onEvent ); 			Dispatcher.addEventListener( SiteEvent.GAME_OVER, onEvent );			Dispatcher.addEventListener( SiteEvent.CLOSE_WINDOW, onEvent );			Dispatcher.addEventListener( SiteEvent.SHOW_PRIZE, onEvent );			Dispatcher.addEventListener( SiteEvent.SELECTION, onEvent );			Dispatcher.addEventListener( SiteEvent.GAME_COMPLETE, onEvent );			Dispatcher.addEventListener( SiteEvent.PLAY_GAME, onEvent );			Dispatcher.addEventListener( SiteEvent.INTRO_COMLETE, onEvent );			Dispatcher.addEventListener( SiteEvent.OUTRO_COMLETE, onEvent );						// Staling based events			StarlingDispatcher.addEventListener( StarlingSiteEvent.PLAY_GAME_CONFIRM, onStarlingEvent );												// Dialogues			playDialogue =  new PlayDialogue			playDialogue.initialize();									return this;					}		// Gets called when there is a request to connect to a location.		private function onStarlingEvent(event:starling.events.Event):void		{						trace("DialogueController -  onStarlingEvent : " + event.type);			switch( event.type )			{								case StarlingSiteEvent.PLAY_GAME_CONFIRM:				change( playDialogue );												currentDisplay.addEventListener( SiteEvent.INTRO_COMLETE, onEvent );				currentDisplay.addEventListener( SiteEvent.OUTRO_COMLETE, onEvent );				//StarlingDispatcher.addEventListener( StarlingSiteEvent.PLAY_GAME												break;							}					}				// Gets called when there is a request to connect to a location.		private function onEvent(event:flash.events.Event):void		{						trace(this + " onEvent : " + event.type);						switch( event.type )			{				case SiteEvent.INTRO_COMLETE:					trace(this + " onEvent : " + event.type);					currentDisplay.removeEventListener( SiteEvent.INTRO_COMLETE, onEvent );					break;								case SiteEvent.OUTRO_COMLETE:					trace(this + " onEvent : " + event.type);					currentDisplay.removeEventListener( SiteEvent.OUTRO_COMLETE, onEvent );										var e:SiteEvent = event as SiteEvent;					StarlingDispatcher.dispatchEvent( new StarlingSiteEvent( StarlingSiteEvent.PLAY_GAME, { game:"" } ) );																				break;								case SiteEvent.DONE:					//change( _wammyDialogueView );					break;								case SiteEvent.RESET:					change();					break;				case SiteEvent.GAME_COMPLETE:					//change( _gameOverDialogueView );					break;				case SiteEvent.END:					//change( _endDialoqueView );					break;				case SiteEvent.GAME_OVER:					//change( _gameOverDialogueView );					break;				case SiteEvent.CLOSE_WINDOW:					//removeChildren();					break;								case SiteEvent.SHOW_PRIZE:					//if( GameData.PRIZE_INDEX >= 5 ) change( _gameOverDialogueView );					//else change( _prizeDialogueView );					break;							}					}			}	}