package{		import com.dasflash.soundcloud.as3api.SoundcloudClient;	import com.dasflash.soundcloud.as3api.SoundcloudDelegate;	import com.dasflash.soundcloud.as3api.SoundcloudResponseFormat;	import com.dasflash.soundcloud.as3api.events.SoundcloudAuthEvent;	import com.dasflash.soundcloud.as3api.events.SoundcloudEvent;	import com.dasflash.soundcloud.as3api.events.SoundcloudFaultEvent;		import fl.controls.Button;	import fl.controls.ProgressBar;	import fl.controls.ProgressBarMode;	import fl.controls.TextArea;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.FileReference;	import flash.net.URLRequestMethod;	import flash.text.TextField;	/*		This sample application requires the SoundCloud AS3 API library		http://github.com/dasflash/Soundcloud-AS3-API/			NOTE: you need to obtain a consumer key and secret for this application		in order to get it running:		http://soundcloud.com/settings/applications/new				enter the strings in the consumerKey and consumerSecret constants below	*/		public class SoundCloudAPITest_Fla extends Sprite	{			private const consumerKey: String = "b0ca45a2799f123db7d1399777d2e2bd";		private const consumerSecret: String = "2179830dd824aedcf60ea0f2f1b60dee";				// reference to soundcloud client		protected var scClient:SoundcloudClient;				// reference to uploaded file		public var track:FileReference;		// declare stage instances		public var requestTokenButton:Button;		public var authorizeButton:Button;		public var verificationCode:TextField;		public var accessTokenButton:Button;		public var meButton:Button;		public var selectTrackButton:Button;		public var uploadButton:Button;		public var getTracksButton:Button;		public var progressBar:ProgressBar;		public var outputText:TextArea;						public function SoundCloudAPITest_Fla()		{			// create soundcloud client			scClient = new SoundcloudClient(	consumerKey,												consumerSecret,												null,												false,												SoundcloudResponseFormat.JSON);						// listen to authentication events			scClient.addEventListener(SoundcloudAuthEvent.REQUEST_TOKEN, requestTokenHandler);			scClient.addEventListener(SoundcloudAuthEvent.ACCESS_TOKEN, accessTokenHandler);						// listen to button events			requestTokenButton.addEventListener(MouseEvent.CLICK, getRequestTokenButtonClickHandler);			authorizeButton.addEventListener(MouseEvent.CLICK, authorizeButtonClickHandler);			accessTokenButton.addEventListener(MouseEvent.CLICK, getAccessTokenButtonClickHandler);			meButton.addEventListener(MouseEvent.CLICK, getMeButtonClickHandler);			selectTrackButton.addEventListener(MouseEvent.CLICK, selectTrackButtonClickHandler);			uploadButton.addEventListener(MouseEvent.CLICK, uploadButtonClickHandler);			getTracksButton.addEventListener(MouseEvent.CLICK, getTracksButtonClickHandler);		}				/* GET REQUEST TOKEN */		protected function getRequestTokenButtonClickHandler(event:MouseEvent):void		{			var delegate:SoundcloudDelegate = scClient.getRequestToken();			delegate.addEventListener(SoundcloudFaultEvent.FAULT, faultHandler);						log("requesting request token");		}				protected function requestTokenHandler(event:SoundcloudAuthEvent):void		{			authorizeButton.enabled = true;						log("request token received: "+event.token.key+", "+event.token.secret);		}				/* GO TO AUTHORIZE PAGE */		protected function authorizeButtonClickHandler(event:MouseEvent):void		{			scClient.authorizeUser();			accessTokenButton.enabled = true;						log("opening authentication page");		}				/* GET ACCESS TOKEN */		protected function getAccessTokenButtonClickHandler(event:MouseEvent):void		{			var delegate:SoundcloudDelegate = scClient.getAccessToken(uint(verificationCode.text).toString());			delegate.addEventListener(SoundcloudFaultEvent.FAULT, faultHandler);						log("requesting access token");		}				protected function accessTokenHandler(event:SoundcloudAuthEvent):void		{			meButton.enabled = true;			selectTrackButton.enabled = true;			getTracksButton.enabled = true;						log("access token received: "+event.token.key+", "+event.token.secret);		}				/* GET USER INFO */		protected function getMeButtonClickHandler(event:MouseEvent):void		{			var delegate:SoundcloudDelegate = scClient.sendRequest("me", URLRequestMethod.GET);			delegate.addEventListener(SoundcloudEvent.REQUEST_COMPLETE, getMeCompleteHandler);						log("requesting user data");		}				protected function getMeCompleteHandler(event:SoundcloudEvent):void		{			log("user data received. they call me "+event.data.username);		}				/* SELECT FILE TO UPLOAD  */		protected function selectTrackButtonClickHandler(event:Event):void		{			var fileReference:FileReference = new FileReference();			fileReference.addEventListener(Event.SELECT, fileSelectHandler);			fileReference.browse();						log("opening file browser");		}				protected function fileSelectHandler(event:Event):void		{			track = FileReference(event.target);			uploadButton.enabled = true;						log("file selected: " + track.name);		}				/* UPLOAD FILE */		protected function uploadButtonClickHandler(event:MouseEvent):void		{			// set track parameters			var params:Object = {};			params["track[title]"] = track.name;			params["track[asset_data]"] = track;			params["track[description]"] = "description";			params["track[downloadable]"] = true;			params["track[sharing]"] = "private";						// create service call delegate			var delegate:SoundcloudDelegate = scClient.sendRequest("tracks", URLRequestMethod.POST, params);			delegate.addEventListener(SoundcloudFaultEvent.FAULT, faultHandler);			delegate.addEventListener(SoundcloudEvent.REQUEST_COMPLETE, uploadCompleteHandler);						// set FileReference as source of progress bar to show upload progress			progressBar.mode = ProgressBarMode.EVENT;			progressBar.source = track;						log("upload started");		}								/* UPLOAD FILE */		protected function getTracksButtonClickHandler(event:MouseEvent):void		{			// set track parameters			var params:Object = {};			params["track[title]"] = track.name;			params["track[asset_data]"] = track;			params["track[description]"] = "description";			params["track[downloadable]"] = true;			params["track[sharing]"] = "private";						// create service call delegate			var delegate:SoundcloudDelegate = scClient.sendRequest("tracks", URLRequestMethod.POST, params);																					delegate.addEventListener(SoundcloudFaultEvent.FAULT, faultHandler);			delegate.addEventListener(SoundcloudEvent.REQUEST_COMPLETE, getTracksCompleteHandler);									/*			// set FileReference as source of progress bar to show upload progress			progressBar.mode = ProgressBarMode.EVENT;			progressBar.source = track;						*/												log("getTracks started");											}								protected function getTracksCompleteHandler(event:SoundcloudEvent):void		{			log("upload complete");		}								protected function uploadCompleteHandler(event:SoundcloudEvent):void		{			log("upload complete");		}				protected function faultHandler(event:SoundcloudFaultEvent):void		{			log("error: " + event.message);		}				protected function log(str:String):void		{			outputText.text += str + "\n";		}		}}